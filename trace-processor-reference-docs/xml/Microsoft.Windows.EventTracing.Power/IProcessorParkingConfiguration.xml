<Type Name="IProcessorParkingConfiguration" FullName="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration">
  <TypeSignature Language="C#" Value="public interface IProcessorParkingConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessorParkingConfiguration" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessorParkingConfiguration" />
  <TypeSignature Language="F#" Value="type IProcessorParkingConfiguration = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConcurrencyHeadroomThreshold">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage ConcurrencyHeadroomThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage ConcurrencyHeadroomThreshold" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ConcurrencyHeadroomThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrencyHeadroomThreshold As Percentage" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyHeadroomThreshold : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ConcurrencyHeadroomThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates how busy all unparked processors must be in order to unpark an additional
            processor.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrencyThreshold">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage ConcurrencyThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage ConcurrencyThreshold" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ConcurrencyThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrencyThreshold As Percentage" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyThreshold : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ConcurrencyThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value used for determining an ideal number of processors to keep unparked on the system, as a
            percentage of how busy all processors are.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            The ideal unparked processor count calculated from this percentage is the minimum number of processors that
            would have been needed to handle more than that percentage of the system's activity. A higher concurrency
            threshold results in a higher concurrency count and thus a larger number of processors being kept unparked.
            </para>
          <para>
            For the concurrency count to be N, the time spent with N or fewer processors must just exceed the threshold.
            For example, on a 4 processor system, if the threshold is 90% and 5% of the time is spent with 4 processors
            busy and 5% is spent with 3 processors busy and the remaining 90% is spent with 2 or fewer processors busy,
            the concurrency count will be 3, because the total percentage of time spent with 3 or fewer running is 95%,
            which is the smallest processor count that is busy above the 90% threshold.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxEfficiencyClass1UnparkedProcessor">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage MaxEfficiencyClass1UnparkedProcessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage MaxEfficiencyClass1UnparkedProcessor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MaxEfficiencyClass1UnparkedProcessor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxEfficiencyClass1UnparkedProcessor As Percentage" />
      <MemberSignature Language="F#" Value="member this.MaxEfficiencyClass1UnparkedProcessor : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MaxEfficiencyClass1UnparkedProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates, on a per processor group basis, the maximum percentage of processors in the
            group that may be kept unparked for Processor Power Efficiency Class 1.
            </summary>
        <value>To be added.</value>
        <remarks>
            Processor Power Efficiency Class describes the relative power efficiency of the associated processor.
            Lower efficiency class numbers are more efficient than higher ones (e.g.efficiency class 0 should be
            treated as more efficient than efficiency class 1). However, absolute values of this number have no
            meaning: 2 isn't necessarily half as efficient as 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxUnparkedProcessor">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage MaxUnparkedProcessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage MaxUnparkedProcessor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MaxUnparkedProcessor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxUnparkedProcessor As Percentage" />
      <MemberSignature Language="F#" Value="member this.MaxUnparkedProcessor : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MaxUnparkedProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the maximum percentage of processors that may be kept unparked in each processor
            group.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinEfficiencyClass1UnparkedProcessor">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage MinEfficiencyClass1UnparkedProcessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage MinEfficiencyClass1UnparkedProcessor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinEfficiencyClass1UnparkedProcessor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinEfficiencyClass1UnparkedProcessor As Percentage" />
      <MemberSignature Language="F#" Value="member this.MinEfficiencyClass1UnparkedProcessor : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinEfficiencyClass1UnparkedProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates, on a per processor group basis, the minimum percentage of processors in the
            group that must be kept unparked in Processor Power Efficiency Class 1.
            </summary>
        <value>To be added.</value>
        <remarks>
            Processor Power Efficiency Class describes the relative power efficiency of the associated processor.
            Lower efficiency class numbers are more efficient than higher ones (e.g.efficiency class 0 should be
            treated as more efficient than efficiency class 1). However, absolute values of this number have no
            meaning: 2 isn't necessarily half as efficient as 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinParkedDuration">
      <MemberSignature Language="C#" Value="public TimeSpan MinParkedDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MinParkedDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinParkedDuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinParkedDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.MinParkedDuration : TimeSpan" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinParkedDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the minimum amount of time a processor must have been parked before it may be
            unparked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinUnparkedDuration">
      <MemberSignature Language="C#" Value="public TimeSpan MinUnparkedDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MinUnparkedDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinUnparkedDuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinUnparkedDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.MinUnparkedDuration : TimeSpan" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinUnparkedDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the minimum amount of time a processor must have been unparked before it may be
            parked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinUnparkedProcessor">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage MinUnparkedProcessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage MinUnparkedProcessor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinUnparkedProcessor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinUnparkedProcessor As Percentage" />
      <MemberSignature Language="F#" Value="member this.MinUnparkedProcessor : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.MinUnparkedProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the minimum percentage of processors that must be kept unparked in each
            processor group.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverUtilizationThreshold">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage OverUtilizationThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage OverUtilizationThreshold" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.OverUtilizationThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OverUtilizationThreshold As Percentage" />
      <MemberSignature Language="F#" Value="member this.OverUtilizationThreshold : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.OverUtilizationThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates how busy a processor must be in order to be considered over-utilized.
            </summary>
        <value>To be added.</value>
        <remarks>
            A processor must be busier than the threshold in order to be considered over-utilized. The percentage of
            time a processor spends being active/utilized determines how busy it is. A parked processor can still be
            active due to affinitized work. An over-utilized parked processor is more likely to be moved to the
            unparked state. An over-utilized unparked processor is more likely to be kept unparked.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParkingPerformanceState">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Power.ParkingPerformanceState ParkingPerformanceState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Power.ParkingPerformanceState ParkingPerformanceState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ParkingPerformanceState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParkingPerformanceState As ParkingPerformanceState" />
      <MemberSignature Language="F#" Value="member this.ParkingPerformanceState : Microsoft.Windows.EventTracing.Power.ParkingPerformanceState" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ParkingPerformanceState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Power.ParkingPerformanceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the performance state that a processor should enter when it is
            parked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParkingPolicy">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy ParkingPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy ParkingPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ParkingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParkingPolicy As ProcessorParkingPolicy" />
      <MemberSignature Language="F#" Value="member this.ParkingPolicy : Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.ParkingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates how aggressive processor parking is when processors must be parked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnparkingPolicy">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy UnparkingPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy UnparkingPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UnparkingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnparkingPolicy As ProcessorParkingPolicy" />
      <MemberSignature Language="F#" Value="member this.UnparkingPolicy : Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UnparkingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Power.ProcessorParkingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates how aggressive processor parking is when processors must be unparked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtilityDistributionEnabled">
      <MemberSignature Language="C#" Value="public bool UtilityDistributionEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UtilityDistributionEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UtilityDistributionEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtilityDistributionEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.UtilityDistributionEnabled : bool" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UtilityDistributionEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the Utility Distribution feature is enabled.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            Utility Distribution is an algorithmic optimization that is designed to improve power efficiency
            for some workloads. It tracks unmovable CPU activity (that is, DPCs, interrupts, or strictly
            affinitized threads), and it predicts the future work on each processor based on the assumption
            that any movable work can be distributed equally across all unparked processors.
            </para>
          <para>
            Utility Distribution is enabled by default for the Balanced power plan for some processors.
            It can reduce processor power consumption by lowering the requested CPU frequencies of workloads
            that are in a reasonably steady state. However, Utility Distribution is not necessarily a good
            algorithmic choice for workloads that are subject to high activity bursts or for programs where
            the workload quickly and randomly shifts across processors. For such workloads, we recommend
            disabling Utility Distribution.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtilityDistributionThreshold">
      <MemberSignature Language="C#" Value="public Microsoft.Windows.EventTracing.Percentage UtilityDistributionThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Windows.EventTracing.Percentage UtilityDistributionThreshold" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UtilityDistributionThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtilityDistributionThreshold As Percentage" />
      <MemberSignature Language="F#" Value="member this.UtilityDistributionThreshold : Microsoft.Windows.EventTracing.Percentage" Usage="Microsoft.Windows.EventTracing.Power.IProcessorParkingConfiguration.UtilityDistributionThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Windows.EventTracing.Power</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Windows.EventTracing.Percentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the threshold used when utility distribution is enabled to determine
            how many processors to have unparked.
            </summary>
        <value>To be added.</value>
        <remarks>
            Documentation on exactly what this threshold is or how it is used is not currently available.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
