<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.Windows.EventTracing.BootPrefetch" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.BootPrefetch")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Cpu" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Cpu")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Defender")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Disk")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.HyperV.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Disk" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Disk")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WaitAnalysis.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Events" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Events")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Internal.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Defender")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Graphics" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Graphics")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.HyperV" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.HyperV")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Memory" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Memory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Internal.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Metadata" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Metadata")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Internal.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Cpu")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Disk")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Network" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Network")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Power" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Power")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Processes" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Processes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Internal.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.BootPrefetch")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Cpu")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Defender.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Disk")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Events")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Graphics")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Metadata")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Network")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Processing.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Regions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Registry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Syscalls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Utc")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WaitAnalysis.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WindowInFocus")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Processing.Community" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Processing.Community")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Processing" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Processing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("EventTracing.Processing.Internal.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.BootPrefetch")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Cpu")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Defender.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Disk")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Events")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Graphics")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.HyperV")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.HyperV.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Memory.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Metadata")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Network")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Power.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Processes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Processing.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Regions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Registry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.ScheduledTasks")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Syscalls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.Utc")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WaitAnalysis.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WindowInFocus")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Processing.OutputRedirection" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Processing.OutputRedirection.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Regions" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Regions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Registry" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Registry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.ScheduledTasks" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.ScheduledTasks")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Services" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Services")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Syscalls" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Syscalls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.Utc" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.Utc")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Windows.EventTracing.WaitAnalysis")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Windows.EventTracing.WindowInFocus" Version="1.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET TraceProcessing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Windows.EventTracing.WindowInFocus")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.Windows.EventTracing">
      <Type Name="Address" Kind="Structure" />
      <Type Name="AddressRange" Kind="Structure" />
      <Type Name="BootPrefetchTraceSourceExtensions" Kind="Class" />
      <Type Name="ClassicEvent" Kind="Structure" />
      <Type Name="ConsumerSchedule" Kind="Enumeration" />
      <Type Name="CpuStreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="CpuTraceSourceExtensions" Kind="Class" />
      <Type Name="DataSize" Kind="Structure" />
      <Type Name="DiskTraceSourceExtensions" Kind="Class" />
      <Type Name="Duration" Kind="Structure" />
      <Type Name="EnergyValue" Kind="Structure" />
      <Type Name="EventContext" Kind="Structure" />
      <Type Name="EventContextState" Kind="Class" />
      <Type Name="EventDataReader" Kind="Class" />
      <Type Name="EventsTraceSourceExtensions" Kind="Class" />
      <Type Name="ExtendedDataItem" Kind="Structure" />
      <Type Name="ExtendedDataItemReadOnlySpan" Kind="Structure" />
      <Type Name="ExtendedDataItemReadOnlySpan+Enumerator" Kind="Structure" />
      <Type Name="ExtendedDataType" Kind="Enumeration" />
      <Type Name="FrequencyValue" Kind="Structure" />
      <Type Name="GraphicsTraceSourceExtensions" Kind="Class" />
      <Type Name="HyperVTraceSourceExtensions" Kind="Class" />
      <Type Name="ICompletable" Kind="Interface" />
      <Type Name="ICompletableTwoPassEventConsumer" Kind="Interface" />
      <Type Name="IEventConsumer" Kind="Interface" />
      <Type Name="IFilteredEventConsumer" Kind="Interface" />
      <Type Name="IFilteredTwoPassEventConsumer" Kind="Interface" />
      <Type Name="InvalidTraceDataException" Kind="Class" />
      <Type Name="InvalidTraceFormatException" Kind="Class" />
      <Type Name="IPendingResult`1" DisplayName="IPendingResult&lt;T&gt;" Kind="Interface" />
      <Type Name="IProvider`1" DisplayName="IProvider&lt;T&gt;" Kind="Interface" />
      <Type Name="IReadOnlyKeyedList`2" DisplayName="IReadOnlyKeyedList&lt;TKey,TValue&gt;" Kind="Interface" />
      <Type Name="IScheduledConsumer" Kind="Interface" />
      <Type Name="IStreamingTraceSource" Kind="Interface" />
      <Type Name="ITraceProcessor" Kind="Interface" />
      <Type Name="ITraceProcessorSettings" Kind="Interface" />
      <Type Name="ITraceSource" Kind="Interface" />
      <Type Name="ITraceTimestampContext" Kind="Interface" />
      <Type Name="ITwoPassEventConsumer" Kind="Interface" />
      <Type Name="MemoryTraceSourceExtensions" Kind="Class" />
      <Type Name="MetadataTraceSourceExtensions" Kind="Class" />
      <Type Name="NetworkTraceSourceExtensions" Kind="Class" />
      <Type Name="Percentage" Kind="Structure" />
      <Type Name="PowerTraceSourceExtensions" Kind="Class" />
      <Type Name="PowerValue" Kind="Structure" />
      <Type Name="ProcessesStreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="ProcessesTraceSourceExtensions" Kind="Class" />
      <Type Name="Proximity" Kind="Enumeration" />
      <Type Name="RegionsTraceSourceExtensions" Kind="Class" />
      <Type Name="RegistryTraceSourceExtensions" Kind="Class" />
      <Type Name="ScheduledTaskStreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="ScheduledTaskTraceSourceExtensions" Kind="Class" />
      <Type Name="ServicesTraceSourceExtensions" Kind="Class" />
      <Type Name="StreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="SymbolsTraceSourceExtensions" Kind="Class" />
      <Type Name="SyscallStreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="SyscallTraceSourceExtensions" Kind="Class" />
      <Type Name="Timestamp" Kind="Structure" />
      <Type Name="ToolkitEventContextState" Kind="Class" />
      <Type Name="TraceClockType" Kind="Enumeration" />
      <Type Name="TraceDuration" Kind="Structure" />
      <Type Name="TraceDurationValue" Kind="Structure" />
      <Type Name="TraceEvent" Kind="Structure" />
      <Type Name="TraceEventCallback" Kind="Delegate" />
      <Type Name="TraceEventHeaderFlags" Kind="Enumeration" />
      <Type Name="TraceEventHeaderProperties" Kind="Enumeration" />
      <Type Name="TraceEventHeaderType" Kind="Enumeration" />
      <Type Name="TraceLostEventsException" Kind="Class" />
      <Type Name="TraceMessageEvent" Kind="Structure" />
      <Type Name="TraceProcessingProgress" Kind="Structure" />
      <Type Name="TraceProcessor" Kind="Class" />
      <Type Name="TraceProcessorExtensions" Kind="Class" />
      <Type Name="TraceProcessorSettings" Kind="Class" />
      <Type Name="TraceSourceExtensions" Kind="Class" />
      <Type Name="TraceTimeInversionException" Kind="Class" />
      <Type Name="TraceTimeRange" Kind="Structure" />
      <Type Name="TraceTimestamp" Kind="Structure" />
      <Type Name="TraceTimestampContextExtensions" Kind="Class" />
      <Type Name="TraceTimestampValue" Kind="Structure" />
      <Type Name="UnparsedGenericEvent" Kind="Structure" />
      <Type Name="UtcTraceSourceExtensions" Kind="Class" />
      <Type Name="ValueString" Kind="Structure" />
      <Type Name="WindowInFocusStreamingTraceSourceExtensions" Kind="Class" />
      <Type Name="WindowInFocusTraceSourceExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.BootPrefetch">
      <Type Name="BootPrefetchActivityFlags" Kind="Enumeration" />
      <Type Name="BootPrefetchActivityPriority" Kind="Enumeration" />
      <Type Name="BootPrefetchActivityType" Kind="Enumeration" />
      <Type Name="IBootPrefetchActivity" Kind="Interface" />
      <Type Name="IBootPrefetchActivityItem" Kind="Interface" />
      <Type Name="IBootPrefetchDataSource" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Cpu">
      <Type Name="AdjustReason" Kind="Enumeration" />
      <Type Name="CompactContextSwitchEvent" Kind="Structure" />
      <Type Name="CompactContextSwitchEventCallback" Kind="Delegate" />
      <Type Name="CompactContextSwitchEventContext" Kind="Structure" />
      <Type Name="ContextSwitch" Kind="Structure" />
      <Type Name="ContextSwitchCallback" Kind="Delegate" />
      <Type Name="ContextSwitchContext" Kind="Structure" />
      <Type Name="ContextSwitchEvent" Kind="Structure" />
      <Type Name="ContextSwitchEventCallback" Kind="Delegate" />
      <Type Name="ContextSwitchEventContext" Kind="Structure" />
      <Type Name="ContextSwitchIn" Kind="Structure" />
      <Type Name="ContextSwitchOut" Kind="Structure" />
      <Type Name="DeferredProcedureCallType" Kind="Enumeration" />
      <Type Name="ICompactContextSwitchEventConsumer" Kind="Interface" />
      <Type Name="IContextSwitch" Kind="Interface" />
      <Type Name="IContextSwitchConsumer" Kind="Interface" />
      <Type Name="IContextSwitchDataSource" Kind="Interface" />
      <Type Name="IContextSwitchEventConsumer" Kind="Interface" />
      <Type Name="IContextSwitchIn" Kind="Interface" />
      <Type Name="IContextSwitchOut" Kind="Interface" />
      <Type Name="ICpuSample" Kind="Interface" />
      <Type Name="ICpuSampleDataSource" Kind="Interface" />
      <Type Name="ICpuSampleGap" Kind="Interface" />
      <Type Name="ICpuSchedulingDataSource" Kind="Interface" />
      <Type Name="ICpuThreadActivity" Kind="Interface" />
      <Type Name="ICpuTimeSlice" Kind="Interface" />
      <Type Name="ICpuUsage" Kind="Interface" />
      <Type Name="IDeferredProcedureCallInterval" Kind="Interface" />
      <Type Name="IInterruptHandlingActivity" Kind="Interface" />
      <Type Name="IInterruptHandlingDataSource" Kind="Interface" />
      <Type Name="IInterruptHandlingFragment" Kind="Interface" />
      <Type Name="IInterruptHandlingInterval" Kind="Interface" />
      <Type Name="IInterruptServiceRoutineInterval" Kind="Interface" />
      <Type Name="ILastBranchRecordDataSource" Kind="Interface" />
      <Type Name="ILastBranchRecordEventConsumer" Kind="Interface" />
      <Type Name="ILastBranchRecordJump" Kind="Interface" />
      <Type Name="ILastBranchRecordSnapshot" Kind="Interface" />
      <Type Name="InterruptHandlingType" Kind="Enumeration" />
      <Type Name="IProcessorCounterContextSwitch" Kind="Interface" />
      <Type Name="IProcessorCounterContextSwitchDelta" Kind="Interface" />
      <Type Name="IProcessorCounterDataSource" Kind="Interface" />
      <Type Name="IProcessorCounterNameMap" Kind="Interface" />
      <Type Name="IReadyThreadDataSource" Kind="Interface" />
      <Type Name="IReadyThreadEvent" Kind="Interface" />
      <Type Name="IReadyThreadEventConsumer" Kind="Interface" />
      <Type Name="KernelWaitReason" Kind="Enumeration" />
      <Type Name="LastBranchRecordEvent" Kind="Structure" />
      <Type Name="LastBranchRecordEventCallback" Kind="Delegate" />
      <Type Name="LastBranchRecordEventContext" Kind="Structure" />
      <Type Name="LastBranchRecordJump" Kind="Structure" />
      <Type Name="LastBranchRecordJumpReadOnlySpan" Kind="Structure" />
      <Type Name="LastBranchRecordJumpReadOnlySpan+Enumerator" Kind="Structure" />
      <Type Name="QualityOfServiceLevel" Kind="Enumeration" />
      <Type Name="ReadyThreadEvent" Kind="Structure" />
      <Type Name="ReadyThreadEventCallback" Kind="Delegate" />
      <Type Name="ReadyThreadEventContext" Kind="Structure" />
      <Type Name="ReadyThreadEventFlags" Kind="Enumeration" />
      <Type Name="ThreadState" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Disk">
      <Type Name="DirectoryChangeNotificationFilters" Kind="Enumeration" />
      <Type Name="DirectoryInformationType" Kind="Enumeration" />
      <Type Name="DiskIOFlags" Kind="Enumeration" />
      <Type Name="DiskIORateBlockReason" Kind="Enumeration" />
      <Type Name="DiskIORateNotBlockReason" Kind="Enumeration" />
      <Type Name="DiskIOSource" Kind="Enumeration" />
      <Type Name="DiskIOType" Kind="Enumeration" />
      <Type Name="FileInformationType" Kind="Enumeration" />
      <Type Name="FileModeResult" Kind="Enumeration" />
      <Type Name="FileOperation" Kind="Enumeration" />
      <Type Name="FileSystemControlCode" Kind="Enumeration" />
      <Type Name="IChangeFileCapacityActivity" Kind="Interface" />
      <Type Name="ICleanupFileActivity" Kind="Interface" />
      <Type Name="ICloseFileActivity" Kind="Interface" />
      <Type Name="ICreateFileObjectActivity" Kind="Interface" />
      <Type Name="IDeleteOnCloseFileActivity" Kind="Interface" />
      <Type Name="IDirectoryChangeNotificationActivity" Kind="Interface" />
      <Type Name="IDiskActivity" Kind="Interface" />
      <Type Name="IDiskActivityDataSource" Kind="Interface" />
      <Type Name="IDiskActivityIORateData" Kind="Interface" />
      <Type Name="IDiskUsage" Kind="Interface" />
      <Type Name="IEnumerateDirectoryActivity" Kind="Interface" />
      <Type Name="IFileActivity" Kind="Interface" />
      <Type Name="IFileActivityDataSource" Kind="Interface" />
      <Type Name="IFileSystemControlActivity" Kind="Interface" />
      <Type Name="IFlushFileActivity" Kind="Interface" />
      <Type Name="IORequestPacketFlags" Kind="Enumeration" />
      <Type Name="IQueryFileExtendedAttributesActivity" Kind="Interface" />
      <Type Name="IQueryFileInformationActivity" Kind="Interface" />
      <Type Name="IQueryFileSecurityActivity" Kind="Interface" />
      <Type Name="IReadFileActivity" Kind="Interface" />
      <Type Name="IRenameFileActivity" Kind="Interface" />
      <Type Name="IResizeFileActivity" Kind="Interface" />
      <Type Name="ISetFileExtendedAttributesActivity" Kind="Interface" />
      <Type Name="ISetFileInformationActivity" Kind="Interface" />
      <Type Name="ISetFileSecurityActivity" Kind="Interface" />
      <Type Name="IWriteFileActivity" Kind="Interface" />
      <Type Name="KernelFileMode" Kind="Enumeration" />
      <Type Name="KernelFileOptions" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Events">
      <Type Name="GenericEventFieldByteType" Kind="Enumeration" />
      <Type Name="GenericEventFieldDateTimeType" Kind="Enumeration" />
      <Type Name="GenericEventFieldExtensions" Kind="Class" />
      <Type Name="GenericEventFieldInt32Type" Kind="Enumeration" />
      <Type Name="GenericEventFieldStringType" Kind="Enumeration" />
      <Type Name="GenericEventFieldType" Kind="Enumeration" />
      <Type Name="GenericEventFieldUInt16Type" Kind="Enumeration" />
      <Type Name="GenericEventFieldUInt32Type" Kind="Enumeration" />
      <Type Name="GenericEventFieldUInt64Type" Kind="Enumeration" />
      <Type Name="GenericEventMapType" Kind="Enumeration" />
      <Type Name="GenericEventSettings" Kind="Class" />
      <Type Name="IClassicEvent" Kind="Interface" />
      <Type Name="IClassicEventDataSource" Kind="Interface" />
      <Type Name="IClassicEventStatistics" Kind="Interface" />
      <Type Name="IClassicProviderStatistics" Kind="Interface" />
      <Type Name="IClassicStackEvent" Kind="Interface" />
      <Type Name="IGenericEvent" Kind="Interface" />
      <Type Name="IGenericEventDataSource" Kind="Interface" />
      <Type Name="IGenericEventEnum" Kind="Interface" />
      <Type Name="IGenericEventField" Kind="Interface" />
      <Type Name="IGenericEventFieldList" Kind="Interface" />
      <Type Name="IGenericEventFlags" Kind="Interface" />
      <Type Name="IGenericEventMap" Kind="Interface" />
      <Type Name="IGenericStackEvent" Kind="Interface" />
      <Type Name="IManifestedEventStatistics" Kind="Interface" />
      <Type Name="IManifestedProviderStatistics" Kind="Interface" />
      <Type Name="IProviderStatistics" Kind="Interface" />
      <Type Name="IStackEvent" Kind="Interface" />
      <Type Name="IStackEventDataSource" Kind="Interface" />
      <Type Name="ITraceLoggingEventStatistics" Kind="Interface" />
      <Type Name="ITraceLoggingProviderStatistics" Kind="Interface" />
      <Type Name="ITraceMessageEventStatistics" Kind="Interface" />
      <Type Name="ITraceMessageProviderStatistics" Kind="Interface" />
      <Type Name="ITraceMessageStackEvent" Kind="Interface" />
      <Type Name="ITraceStatisticsDataSource" Kind="Interface" />
      <Type Name="IWindowsTracePreprocessorDataSource" Kind="Interface" />
      <Type Name="IWindowsTracePreprocessorEvent" Kind="Interface" />
      <Type Name="SocketAddressExtensions" Kind="Class" />
      <Type Name="StackSnapshotExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Graphics">
      <Type Name="DmaPacketType" Kind="Enumeration" />
      <Type Name="IDirectXDataSource" Kind="Interface" />
      <Type Name="IDmaPacket" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.HyperV">
      <Type Name="HypercallFunction" Kind="Enumeration" />
      <Type Name="HypervisorPartitionId" Kind="Class" />
      <Type Name="IHypercall" Kind="Interface" />
      <Type Name="IHypercallDataSource" Kind="Interface" />
      <Type Name="IHypervisorPartitionDataSource" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Memory">
      <Type Name="HandleType" Kind="Enumeration" />
      <Type Name="IGenericHandle" Kind="Interface" />
      <Type Name="IHandle" Kind="Interface" />
      <Type Name="IHandleDataSource" Kind="Interface" />
      <Type Name="IHardFault" Kind="Interface" />
      <Type Name="IHardFaultDataSource" Kind="Interface" />
      <Type Name="IHeapAllocation" Kind="Interface" />
      <Type Name="IHeapSnapshot" Kind="Interface" />
      <Type Name="IHeapSnapshotDataSource" Kind="Interface" />
      <Type Name="IMappedFileLifetime" Kind="Interface" />
      <Type Name="IMemoryUtilizationDataSource" Kind="Interface" />
      <Type Name="IMemoryUtilizationSnapshot" Kind="Interface" />
      <Type Name="IPageFileSectionLifetime" Kind="Interface" />
      <Type Name="IPoolAllocationDataSource" Kind="Interface" />
      <Type Name="IPoolAllocationInterval" Kind="Interface" />
      <Type Name="IProcessHandle" Kind="Interface" />
      <Type Name="IReferenceSetAccessedPage" Kind="Interface" />
      <Type Name="IReferenceSetDataSource" Kind="Interface" />
      <Type Name="IReferenceSetInterval" Kind="Interface" />
      <Type Name="IResidentSetDataSource" Kind="Interface" />
      <Type Name="IResidentSetPage" Kind="Interface" />
      <Type Name="IResidentSetSnapshot" Kind="Interface" />
      <Type Name="IWorkingSetDataSource" Kind="Interface" />
      <Type Name="IWorkingSetEntry" Kind="Interface" />
      <Type Name="IWorkingSetSnapshot" Kind="Interface" />
      <Type Name="MemoryManagerListType" Kind="Enumeration" />
      <Type Name="MemoryProtectionMode" Kind="Structure" />
      <Type Name="MemoryUsageType" Kind="Enumeration" />
      <Type Name="PoolType" Kind="Structure" />
      <Type Name="ProcessSectionType" Kind="Enumeration" />
      <Type Name="RawPoolType" Kind="Enumeration" />
      <Type Name="ReferenceSetAccessedPageFlags" Kind="Enumeration" />
      <Type Name="ReferenceSetReferenceReason" Kind="Enumeration" />
      <Type Name="ReferenceSetReleaseReason" Kind="Enumeration" />
      <Type Name="ResidentSetPageCategory" Kind="Enumeration" />
      <Type Name="ResidentSetSnapshotListType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Metadata">
      <Type Name="Architecture" Kind="Enumeration" />
      <Type Name="BuildFlavor" Kind="Enumeration" />
      <Type Name="FileSystem" Kind="Enumeration" />
      <Type Name="FirmwareType" Kind="Enumeration" />
      <Type Name="IBootConfiguration" Kind="Interface" />
      <Type Name="IBuildInfo" Kind="Interface" />
      <Type Name="IdeTransferMode" Kind="Enumeration" />
      <Type Name="IdeTransferProtocol" Kind="Enumeration" />
      <Type Name="IDisk" Kind="Interface" />
      <Type Name="IDisplay" Kind="Interface" />
      <Type Name="IDisplayAdapter" Kind="Interface" />
      <Type Name="IFlightConfiguration" Kind="Interface" />
      <Type Name="IFlightId" Kind="Interface" />
      <Type Name="IIdeDevice" Kind="Interface" />
      <Type Name="IMark" Kind="Interface" />
      <Type Name="IMarkDataSource" Kind="Interface" />
      <Type Name="IPartition" Kind="Interface" />
      <Type Name="IPhoneInfo" Kind="Interface" />
      <Type Name="IProcessor" Kind="Interface" />
      <Type Name="IRundownDataSource" Kind="Interface" />
      <Type Name="IRundownInterval" Kind="Interface" />
      <Type Name="ISleepStateSupport" Kind="Interface" />
      <Type Name="ISystemMetadata" Kind="Interface" />
      <Type Name="ITraceMetadata" Kind="Interface" />
      <Type Name="IVirtualizationConfiguration" Kind="Interface" />
      <Type Name="ManufacturerFormFactor" Kind="Enumeration" />
      <Type Name="OSFamily" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Network">
      <Type Name="IWinINetDataSource" Kind="Interface" />
      <Type Name="IWinINetHttpActivity" Kind="Interface" />
      <Type Name="IWinINetHttpCacheHit" Kind="Interface" />
      <Type Name="IWinINetHttpRequestResponsePair" Kind="Interface" />
      <Type Name="IWinINetHttpRoundtrip" Kind="Interface" />
      <Type Name="IWinINetHttpStreamRead" Kind="Interface" />
      <Type Name="WinINetHttpProtocol" Kind="Enumeration" />
      <Type Name="WinINetHttpRequestResponsePairType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Power">
      <Type Name="ConnectedStandbyExitReason" Kind="Enumeration" />
      <Type Name="ConnectedStandbyTransition" Kind="Enumeration" />
      <Type Name="CpuIdleState" Kind="Enumeration" />
      <Type Name="CpuIdleStateExpectedDurationReason" Kind="Enumeration" />
      <Type Name="DeviceState" Kind="Enumeration" />
      <Type Name="FunctionState" Kind="Enumeration" />
      <Type Name="IActualPlatformIdleStateDuration" Kind="Interface" />
      <Type Name="IBatteryConfiguration" Kind="Interface" />
      <Type Name="IButtonActionConfiguration" Kind="Interface" />
      <Type Name="IComponentFunctionalStateInterval" Kind="Interface" />
      <Type Name="IConnectedStandbyDataSource" Kind="Interface" />
      <Type Name="IConnectedStandbyExit" Kind="Interface" />
      <Type Name="IConnectedStandbySession" Kind="Interface" />
      <Type Name="ICpuIdleStateDataSource" Kind="Interface" />
      <Type Name="ICpuIdleStateInterval" Kind="Interface" />
      <Type Name="ICpuIdleStateTransition" Kind="Interface" />
      <Type Name="IDevicePowerDataSource" Kind="Interface" />
      <Type Name="IDeviceRundown" Kind="Interface" />
      <Type Name="IDeviceStateInterval" Kind="Interface" />
      <Type Name="IDiskConfiguration" Kind="Interface" />
      <Type Name="IDisplayConfiguration" Kind="Interface" />
      <Type Name="IEnergyEstimationDataSource" Kind="Interface" />
      <Type Name="IEnergyEstimationInterval" Kind="Interface" />
      <Type Name="IEnergyMeasurementInterval" Kind="Interface" />
      <Type Name="IEnergyMeterDataSource" Kind="Interface" />
      <Type Name="IIdleConfiguration" Kind="Interface" />
      <Type Name="IPlatformIdleStateDataSource" Kind="Interface" />
      <Type Name="IPowerConfigurationDataSource" Kind="Interface" />
      <Type Name="IPowerConfigurationSnapshot" Kind="Interface" />
      <Type Name="IPowerDependencyCoordinatorDataSource" Kind="Interface" />
      <Type Name="IPowerDependencyPhaseInterval" Kind="Interface" />
      <Type Name="IProcessorConfiguration" Kind="Interface" />
      <Type Name="IProcessorFrequencyDataSource" Kind="Interface" />
      <Type Name="IProcessorFrequencyInterval" Kind="Interface" />
      <Type Name="IProcessorParkingConfiguration" Kind="Interface" />
      <Type Name="IProcessorParkingDataSource" Kind="Interface" />
      <Type Name="IProcessorParkingInterval" Kind="Interface" />
      <Type Name="IProcessorParkingLimitDataSource" Kind="Interface" />
      <Type Name="IProcessorParkingLimitInterval" Kind="Interface" />
      <Type Name="IProcessorPerformanceConfiguration" Kind="Interface" />
      <Type Name="IProcessorProfileDataSource" Kind="Interface" />
      <Type Name="IProcessorProfileInterval" Kind="Interface" />
      <Type Name="IProcessorQualityOfServiceDataSource" Kind="Interface" />
      <Type Name="IProcessorQualityOfServiceInterval" Kind="Interface" />
      <Type Name="IProcessorThrottlingDataSource" Kind="Interface" />
      <Type Name="IProcessorThrottlingInterval" Kind="Interface" />
      <Type Name="ISleepConfiguration" Kind="Interface" />
      <Type Name="ISystemPowerSourceDataSource" Kind="Interface" />
      <Type Name="ISystemPowerSourceInterval" Kind="Interface" />
      <Type Name="ISystemSleepDataSource" Kind="Interface" />
      <Type Name="ISystemSleepInterval" Kind="Interface" />
      <Type Name="ITargetCpuIdleStateDataSource" Kind="Interface" />
      <Type Name="ITargetCpuIdleStateInterval" Kind="Interface" />
      <Type Name="ITargetPlatformIdleStateInterval" Kind="Interface" />
      <Type Name="ITargetProcessorFrequencyDataSource" Kind="Interface" />
      <Type Name="ITargetProcessorFrequencyInterval" Kind="Interface" />
      <Type Name="ParkingPerformanceState" Kind="Enumeration" />
      <Type Name="PowerAction" Kind="Enumeration" />
      <Type Name="PowerDependencyPhase" Kind="Enumeration" />
      <Type Name="PowerSourceType" Kind="Enumeration" />
      <Type Name="ProcessorParkingPolicy" Kind="Enumeration" />
      <Type Name="ProcessorPerformanceBoostMode" Kind="Enumeration" />
      <Type Name="ProcessorPerformanceChangePolicy" Kind="Enumeration" />
      <Type Name="ProcessorQualityOfServiceLevel" Kind="Enumeration" />
      <Type Name="ProcessorThrottlePolicy" Kind="Enumeration" />
      <Type Name="ProcessorThrottlingType" Kind="Enumeration" />
      <Type Name="SleepState" Kind="Enumeration" />
      <Type Name="SystemCoolingPolicy" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Processes">
      <Type Name="IImage" Kind="Interface" />
      <Type Name="IImageSection" Kind="Interface" />
      <Type Name="IImageSectionDataSource" Kind="Interface" />
      <Type Name="ImageExtensions" Kind="Class" />
      <Type Name="ImageLoadReason" Kind="Enumeration" />
      <Type Name="IOPriority" Kind="Enumeration" />
      <Type Name="IPackageMetadata" Kind="Interface" />
      <Type Name="IProcess" Kind="Interface" />
      <Type Name="IProcessDataSource" Kind="Interface" />
      <Type Name="IThread" Kind="Interface" />
      <Type Name="IThreadCreateEventConsumer" Kind="Interface" />
      <Type Name="IThreadDataSource" Kind="Interface" />
      <Type Name="IThreadExitEventConsumer" Kind="Interface" />
      <Type Name="IThreadRundownStartEventConsumer" Kind="Interface" />
      <Type Name="IThreadRundownStopEventConsumer" Kind="Interface" />
      <Type Name="IThreadSetNameEventConsumer" Kind="Interface" />
      <Type Name="MemoryPriority" Kind="Enumeration" />
      <Type Name="ProcessDataSourceExtensions" Kind="Class" />
      <Type Name="ProcessExtensions" Kind="Class" />
      <Type Name="ThreadCreateEvent" Kind="Structure" />
      <Type Name="ThreadCreateEventCallback" Kind="Delegate" />
      <Type Name="ThreadCreateEventContext" Kind="Structure" />
      <Type Name="ThreadExitEvent" Kind="Structure" />
      <Type Name="ThreadExitEventCallback" Kind="Delegate" />
      <Type Name="ThreadExitEventContext" Kind="Structure" />
      <Type Name="ThreadRundownStartEvent" Kind="Structure" />
      <Type Name="ThreadRundownStartEventCallback" Kind="Delegate" />
      <Type Name="ThreadRundownStartEventContext" Kind="Structure" />
      <Type Name="ThreadRundownStopEvent" Kind="Structure" />
      <Type Name="ThreadRundownStopEventCallback" Kind="Delegate" />
      <Type Name="ThreadRundownStopEventContext" Kind="Structure" />
      <Type Name="ThreadSetNameEvent" Kind="Structure" />
      <Type Name="ThreadSetNameEventCallback" Kind="Delegate" />
      <Type Name="ThreadSetNameEventContext" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Regions">
      <Type Name="IRegion" Kind="Interface" />
      <Type Name="IRegionDataSource" Kind="Interface" />
      <Type Name="IRegionEvent" Kind="Interface" />
      <Type Name="IRegionField" Kind="Interface" />
      <Type Name="IRegionFieldList" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Registry">
      <Type Name="IRegistryActivity" Kind="Interface" />
      <Type Name="IRegistryActivityDataSource" Kind="Interface" />
      <Type Name="IRegistryEnumerationOperation" Kind="Interface" />
      <Type Name="IRegistryKeyOperation" Kind="Interface" />
      <Type Name="IRegistryValueOperation" Kind="Interface" />
      <Type Name="RegistryOperation" Kind="Enumeration" />
      <Type Name="RegistryOperationType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.ScheduledTasks">
      <Type Name="IScheduledTask" Kind="Interface" />
      <Type Name="IScheduledTaskConsumer" Kind="Interface" />
      <Type Name="IScheduledTaskDataSource" Kind="Interface" />
      <Type Name="IScheduledTaskStartEventConsumer" Kind="Interface" />
      <Type Name="IScheduledTaskStopEventConsumer" Kind="Interface" />
      <Type Name="IScheduledTaskTriggerEventConsumer" Kind="Interface" />
      <Type Name="ScheduledTask" Kind="Structure" />
      <Type Name="ScheduledTaskCallback" Kind="Delegate" />
      <Type Name="ScheduledTaskContext" Kind="Structure" />
      <Type Name="ScheduledTaskStartEvent" Kind="Structure" />
      <Type Name="ScheduledTaskStartEventCallback" Kind="Delegate" />
      <Type Name="ScheduledTaskStartEventContext" Kind="Structure" />
      <Type Name="ScheduledTaskStopEvent" Kind="Structure" />
      <Type Name="ScheduledTaskStopEventCallback" Kind="Delegate" />
      <Type Name="ScheduledTaskStopEventContext" Kind="Structure" />
      <Type Name="ScheduledTaskTriggerEvent" Kind="Structure" />
      <Type Name="ScheduledTaskTriggerEventCallback" Kind="Delegate" />
      <Type Name="ScheduledTaskTriggerEventContext" Kind="Structure" />
      <Type Name="ScheduledTaskTriggerType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Services">
      <Type Name="IService" Kind="Interface" />
      <Type Name="IServiceDataSource" Kind="Interface" />
      <Type Name="IServiceGroup" Kind="Interface" />
      <Type Name="IServiceSnapshot" Kind="Interface" />
      <Type Name="IServiceStateChange" Kind="Interface" />
      <Type Name="IServiceTransition" Kind="Interface" />
      <Type Name="ServiceStartType" Kind="Enumeration" />
      <Type Name="ServiceState" Kind="Enumeration" />
      <Type Name="ServiceTransitionType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Symbols">
      <Type Name="AnalyzerThreadStackPattern" Kind="Class" />
      <Type Name="IPdb" Kind="Interface" />
      <Type Name="IStackDataSource" Kind="Interface" />
      <Type Name="IStackFramePattern" Kind="Interface" />
      <Type Name="IStackFrameTag" Kind="Interface" />
      <Type Name="IStackSnapshot" Kind="Interface" />
      <Type Name="IStackSymbol" Kind="Interface" />
      <Type Name="IStackTagDataSource" Kind="Interface" />
      <Type Name="IStackTagMapper" Kind="Interface" />
      <Type Name="ISymbolDataSource" Kind="Interface" />
      <Type Name="ISymbolPath" Kind="Interface" />
      <Type Name="ISymCachePath" Kind="Interface" />
      <Type Name="IThreadStack" Kind="Interface" />
      <Type Name="IThreadStackPattern" Kind="Interface" />
      <Type Name="OptimizationType" Kind="Enumeration" />
      <Type Name="RawSymbolPath" Kind="Class" />
      <Type Name="RawSymCachePath" Kind="Class" />
      <Type Name="StackFrame" Kind="Structure" />
      <Type Name="StackFrameExtensions" Kind="Class" />
      <Type Name="SymbolDataSourceExtensions" Kind="Class" />
      <Type Name="SymbolLoadingProgress" Kind="Structure" />
      <Type Name="SymbolLoadStatus" Kind="Enumeration" />
      <Type Name="SymbolPath" Kind="Class" />
      <Type Name="SymCachePath" Kind="Class" />
      <Type Name="ThreadStackExtensions" Kind="Class" />
      <Type Name="TrainingResult" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Syscalls">
      <Type Name="ISyscall" Kind="Interface" />
      <Type Name="ISyscallConsumer" Kind="Interface" />
      <Type Name="ISyscallDataSource" Kind="Interface" />
      <Type Name="ISyscallEnterEventConsumer" Kind="Interface" />
      <Type Name="ISyscallExitEventConsumer" Kind="Interface" />
      <Type Name="Syscall" Kind="Structure" />
      <Type Name="SyscallCallback" Kind="Delegate" />
      <Type Name="SyscallContext" Kind="Structure" />
      <Type Name="SyscallEnterEvent" Kind="Structure" />
      <Type Name="SyscallEnterEventCallback" Kind="Delegate" />
      <Type Name="SyscallEnterEventContext" Kind="Structure" />
      <Type Name="SyscallExitEvent" Kind="Structure" />
      <Type Name="SyscallExitEventCallback" Kind="Delegate" />
      <Type Name="SyscallExitEventContext" Kind="Structure" />
      <Type Name="SyscallExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.Utc">
      <Type Name="IGenericUtcTrigger" Kind="Interface" />
      <Type Name="IUtcActivity" Kind="Interface" />
      <Type Name="IUtcDataSource" Kind="Interface" />
      <Type Name="IUtcEventTrigger" Kind="Interface" />
      <Type Name="IUtcField" Kind="Interface" />
      <Type Name="IUtcFieldList" Kind="Interface" />
      <Type Name="IUtcScenarioActivity" Kind="Interface" />
      <Type Name="IUtcTimeTrigger" Kind="Interface" />
      <Type Name="IUtcTrigger" Kind="Interface" />
      <Type Name="ScenarioState" Kind="Enumeration" />
      <Type Name="UtcActivityType" Kind="Enumeration" />
      <Type Name="UtcDataSourceExtensions" Kind="Class" />
      <Type Name="UtcProviderType" Kind="Enumeration" />
      <Type Name="UtcScenarioActivityExtensions" Kind="Class" />
      <Type Name="UtcTriggerType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.EventTracing.WindowInFocus">
      <Type Name="FocusChangeEvent" Kind="Structure" />
      <Type Name="FocusChangeEventCallback" Kind="Delegate" />
      <Type Name="FocusChangeEventContext" Kind="Structure" />
      <Type Name="IFocusChangeEventConsumer" Kind="Interface" />
      <Type Name="ISessionLayerSetActiveWindowEventConsumer" Kind="Interface" />
      <Type Name="IWindowInFocusDataSource" Kind="Interface" />
      <Type Name="IWindowInFocusInterval" Kind="Interface" />
      <Type Name="IWindowInFocusIntervalConsumer" Kind="Interface" />
      <Type Name="SessionLayerSetActiveWindowEvent" Kind="Structure" />
      <Type Name="SessionLayerSetActiveWindowEventCallback" Kind="Delegate" />
      <Type Name="SessionLayerSetActiveWindowEventContext" Kind="Structure" />
      <Type Name="WindowInFocusInterval" Kind="Structure" />
      <Type Name="WindowInFocusIntervalCallback" Kind="Delegate" />
      <Type Name="WindowInFocusIntervalContext" Kind="Structure" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseReadyBootData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.BootPrefetch.IBootPrefetchDataSource&gt; UseReadyBootData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.BootPrefetch.IBootPrefetchDataSource&gt; UseReadyBootData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.BootPrefetchTraceSourceExtensions.UseReadyBootData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseReadyBootData (trace As ITraceSource) As IPendingResult(Of IBootPrefetchDataSource)" />
        <MemberSignature Language="F#" Value="static member UseReadyBootData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.BootPrefetch.IBootPrefetchDataSource&gt;" Usage="Microsoft.Windows.EventTracing.BootPrefetchTraceSourceExtensions.UseReadyBootData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.BootPrefetch.IBootPrefetchDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about boot prefetching activity from Ready Boot.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.BootPrefetchTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.BootPrefetchTraceSourceExtensions.UseReadyBootData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseCompactContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseCompactContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseCompactContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseCompactContextSwitchEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As CompactContextSwitchEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseCompactContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed compact context switch events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseCompactContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseCompactContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseCompactContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseCompactContextSwitchEvents (streamingTrace As IStreamingTraceSource, process As CompactContextSwitchEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseCompactContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed compact context switch events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.CompactContextSwitchEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseCompactContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseCompactContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseCompactContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseCompactContextSwitchEvents (streamingTrace As IStreamingTraceSource, consumer As ICompactContextSwitchEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseCompactContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed compact context switch events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseCompactContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ICompactContextSwitchEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchData">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchData (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchData(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchData (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ContextSwitchCallback)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchData : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive context switch data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchData">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchData (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchData(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchData (streamingTrace As IStreamingTraceSource, process As ContextSwitchCallback)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchData : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive context switch data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ContextSwitchCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchData">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchData (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchData(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchData (streamingTrace As IStreamingTraceSource, consumer As IContextSwitchConsumer)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchData : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the result.</param>
          <summary>Registers a consumer to receive context switch data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IContextSwitchConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ContextSwitchEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed context switch events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchEvents (streamingTrace As IStreamingTraceSource, process As ContextSwitchEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed context switch events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ContextSwitchEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchEvents">
        <MemberSignature Language="C#" Value="public static void UseContextSwitchEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseContextSwitchEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseContextSwitchEvents (streamingTrace As IStreamingTraceSource, consumer As IContextSwitchEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed context switch events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseContextSwitchEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IContextSwitchEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseLastBranchRecordEvents">
        <MemberSignature Language="C#" Value="public static void UseLastBranchRecordEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseLastBranchRecordEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseLastBranchRecordEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As LastBranchRecordEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseLastBranchRecordEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed last branch record (LBR) events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseLastBranchRecordEvents">
        <MemberSignature Language="C#" Value="public static void UseLastBranchRecordEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseLastBranchRecordEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseLastBranchRecordEvents (streamingTrace As IStreamingTraceSource, consumer As ILastBranchRecordEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseLastBranchRecordEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed last branch record (LBR) events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseLastBranchRecordEvents">
        <MemberSignature Language="C#" Value="public static void UseLastBranchRecordEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseLastBranchRecordEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseLastBranchRecordEvents (streamingTrace As IStreamingTraceSource, process As LastBranchRecordEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseLastBranchRecordEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed last branch record (LBR) events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseLastBranchRecordEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.LastBranchRecordEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseReadyThreadEvents">
        <MemberSignature Language="C#" Value="public static void UseReadyThreadEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseReadyThreadEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseReadyThreadEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ReadyThreadEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseReadyThreadEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed ready thread events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseReadyThreadEvents">
        <MemberSignature Language="C#" Value="public static void UseReadyThreadEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseReadyThreadEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseReadyThreadEvents (streamingTrace As IStreamingTraceSource, consumer As IReadyThreadEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseReadyThreadEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed ready thread events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.IReadyThreadEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseReadyThreadEvents">
        <MemberSignature Language="C#" Value="public static void UseReadyThreadEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseReadyThreadEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseReadyThreadEvents (streamingTrace As IStreamingTraceSource, process As ReadyThreadEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseReadyThreadEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed ready thread events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuStreamingTraceSourceExtensions.UseReadyThreadEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Cpu.ReadyThreadEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt; UseContextSwitchData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt; UseContextSwitchData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseContextSwitchData (trace As ITraceSource) As IPendingResult(Of IContextSwitchDataSource)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about processor context switches.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseContextSwitchData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt; UseContextSwitchData (this Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt; UseContextSwitchData(class Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseContextSwitchData (trace As ITraceSource, Optional useLegacyImplementation As Boolean = false) As IPendingResult(Of IContextSwitchDataSource)" />
        <MemberSignature Language="F#" Value="static member UseContextSwitchData : Microsoft.Windows.EventTracing.ITraceSource * bool -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData (trace, useLegacyImplementation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IContextSwitchDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="useLegacyImplementation" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="useLegacyImplementation">Whether to use a legacy implementation to retrieve this data.</param>
          <summary>Provides data from a trace about processor context switches.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseContextSwitchData(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseCpuSamplingData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSampleDataSource&gt; UseCpuSamplingData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.ICpuSampleDataSource&gt; UseCpuSamplingData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSamplingData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseCpuSamplingData (trace As ITraceSource) As IPendingResult(Of ICpuSampleDataSource)" />
        <MemberSignature Language="F#" Value="static member UseCpuSamplingData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSampleDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSamplingData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSampleDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about CPU usage based on periodic sampling of the instruction pointer.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSamplingData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseCpuSchedulingData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSchedulingDataSource&gt; UseCpuSchedulingData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.ICpuSchedulingDataSource&gt; UseCpuSchedulingData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSchedulingData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseCpuSchedulingData (trace As ITraceSource) As IPendingResult(Of ICpuSchedulingDataSource)" />
        <MemberSignature Language="F#" Value="static member UseCpuSchedulingData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSchedulingDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSchedulingData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ICpuSchedulingDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about CPU thread scheduling, including context switches and ready thread events.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseCpuSchedulingData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseInterruptHandlingData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IInterruptHandlingDataSource&gt; UseInterruptHandlingData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IInterruptHandlingDataSource&gt; UseInterruptHandlingData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseInterruptHandlingData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseInterruptHandlingData (trace As ITraceSource) As IPendingResult(Of IInterruptHandlingDataSource)" />
        <MemberSignature Language="F#" Value="static member UseInterruptHandlingData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IInterruptHandlingDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseInterruptHandlingData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IInterruptHandlingDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about Interrupt Service Routine (ISR) and Deferred Procedure Call (DPC) activity.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseInterruptHandlingData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseLastBranchRecordData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordDataSource&gt; UseLastBranchRecordData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordDataSource&gt; UseLastBranchRecordData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseLastBranchRecordData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLastBranchRecordData (trace As ITraceSource) As IPendingResult(Of ILastBranchRecordDataSource)" />
        <MemberSignature Language="F#" Value="static member UseLastBranchRecordData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseLastBranchRecordData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.ILastBranchRecordDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about processor last branch record (LBR) activity during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseLastBranchRecordData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorCounters">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IProcessorCounterDataSource&gt; UseProcessorCounters (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IProcessorCounterDataSource&gt; UseProcessorCounters(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseProcessorCounters(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorCounters (trace As ITraceSource) As IPendingResult(Of IProcessorCounterDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorCounters : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IProcessorCounterDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseProcessorCounters trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IProcessorCounterDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about processor performance counter values from Processor Counter Monitor (PCM).
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseProcessorCounters(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseReadyThreadData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt; UseReadyThreadData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt; UseReadyThreadData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseReadyThreadData (trace As ITraceSource) As IPendingResult(Of IReadyThreadDataSource)" />
        <MemberSignature Language="F#" Value="static member UseReadyThreadData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about ready thread events.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseReadyThreadData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt; UseReadyThreadData (this Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt; UseReadyThreadData(class Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseReadyThreadData (trace As ITraceSource, Optional useLegacyImplementation As Boolean = false) As IPendingResult(Of IReadyThreadDataSource)" />
        <MemberSignature Language="F#" Value="static member UseReadyThreadData : Microsoft.Windows.EventTracing.ITraceSource * bool -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt;" Usage="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData (trace, useLegacyImplementation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Cpu.IReadyThreadDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="useLegacyImplementation" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="useLegacyImplementation">Whether to use a legacy implementation to retrieve this data.</param>
          <summary>Provides data from a trace about ready thread events.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.CpuTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.CpuTraceSourceExtensions.UseReadyThreadData(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseDiskIOData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IDiskActivityDataSource&gt; UseDiskIOData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Disk.IDiskActivityDataSource&gt; UseDiskIOData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseDiskIOData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDiskIOData (trace As ITraceSource) As IPendingResult(Of IDiskActivityDataSource)" />
        <MemberSignature Language="F#" Value="static member UseDiskIOData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IDiskActivityDataSource&gt;" Usage="Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseDiskIOData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IDiskActivityDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about Disk I/O activity.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.DiskTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseDiskIOData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseFileIOData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IFileActivityDataSource&gt; UseFileIOData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Disk.IFileActivityDataSource&gt; UseFileIOData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseFileIOData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseFileIOData (trace As ITraceSource) As IPendingResult(Of IFileActivityDataSource)" />
        <MemberSignature Language="F#" Value="static member UseFileIOData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IFileActivityDataSource&gt;" Usage="Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseFileIOData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Disk.IFileActivityDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about File I/O activity.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.DiskTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.DiskTraceSourceExtensions.UseFileIOData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Events.IGenericEventField" />
      </Targets>
      <Member MemberName="AsObject">
        <MemberSignature Language="C#" Value="public static object AsObject (this Microsoft.Windows.EventTracing.Events.IGenericEventField field);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object AsObject(class Microsoft.Windows.EventTracing.Events.IGenericEventField field) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Events.GenericEventFieldExtensions.AsObject(Microsoft.Windows.EventTracing.Events.IGenericEventField)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObject (field As IGenericEventField) As Object" />
        <MemberSignature Language="F#" Value="static member AsObject : Microsoft.Windows.EventTracing.Events.IGenericEventField -&gt; obj" Usage="Microsoft.Windows.EventTracing.Events.GenericEventFieldExtensions.AsObject field" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="field" Type="Microsoft.Windows.EventTracing.Events.IGenericEventField" RefType="this" />
        </Parameters>
        <Docs>
          <param name="field">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Events.GenericEventFieldExtensions" Member="M:Microsoft.Windows.EventTracing.Events.GenericEventFieldExtensions.AsObject(Microsoft.Windows.EventTracing.Events.IGenericEventField)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.SocketAddress" />
      </Targets>
      <Member MemberName="GetIPv6Flow">
        <MemberSignature Language="C#" Value="public static int GetIPv6Flow (this System.Net.SocketAddress socketAddress);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIPv6Flow(class System.Net.SocketAddress socketAddress) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.GetIPv6Flow(System.Net.SocketAddress)" />
        <MemberSignature Language="F#" Value="static member GetIPv6Flow : System.Net.SocketAddress -&gt; int" Usage="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.GetIPv6Flow socketAddress" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="socketAddress" Type="System.Net.SocketAddress" RefType="this" />
        </Parameters>
        <Docs>
          <param name="socketAddress">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions" Member="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.GetIPv6Flow(System.Net.SocketAddress)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.SocketAddress" />
      </Targets>
      <Member MemberName="IsIPv6">
        <MemberSignature Language="C#" Value="public static bool IsIPv6 (this System.Net.SocketAddress socketAddress);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIPv6(class System.Net.SocketAddress socketAddress) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.IsIPv6(System.Net.SocketAddress)" />
        <MemberSignature Language="F#" Value="static member IsIPv6 : System.Net.SocketAddress -&gt; bool" Usage="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.IsIPv6 socketAddress" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="socketAddress" Type="System.Net.SocketAddress" RefType="this" />
        </Parameters>
        <Docs>
          <param name="socketAddress">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions" Member="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.IsIPv6(System.Net.SocketAddress)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.SocketAddress" />
      </Targets>
      <Member MemberName="ToIPEndPoint">
        <MemberSignature Language="C#" Value="public static System.Net.IPEndPoint ToIPEndPoint (this System.Net.SocketAddress socketAddress);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPEndPoint ToIPEndPoint(class System.Net.SocketAddress socketAddress) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.ToIPEndPoint(System.Net.SocketAddress)" />
        <MemberSignature Language="F#" Value="static member ToIPEndPoint : System.Net.SocketAddress -&gt; System.Net.IPEndPoint" Usage="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.ToIPEndPoint socketAddress" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.IPEndPoint</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="socketAddress" Type="System.Net.SocketAddress" RefType="this" />
        </Parameters>
        <Docs>
          <param name="socketAddress">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Events.SocketAddressExtensions" Member="M:Microsoft.Windows.EventTracing.Events.SocketAddressExtensions.ToIPEndPoint(System.Net.SocketAddress)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.IStackSnapshot" />
      </Targets>
      <Member MemberName="GetEvent">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.Events.IStackEvent GetEvent (this Microsoft.Windows.EventTracing.Symbols.IStackSnapshot stack, Microsoft.Windows.EventTracing.Events.IStackEventDataSource eventDataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.Events.IStackEvent GetEvent(class Microsoft.Windows.EventTracing.Symbols.IStackSnapshot stack, class Microsoft.Windows.EventTracing.Events.IStackEventDataSource eventDataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Events.StackSnapshotExtensions.GetEvent(Microsoft.Windows.EventTracing.Symbols.IStackSnapshot,Microsoft.Windows.EventTracing.Events.IStackEventDataSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEvent (stack As IStackSnapshot, eventDataSource As IStackEventDataSource) As IStackEvent" />
        <MemberSignature Language="F#" Value="static member GetEvent : Microsoft.Windows.EventTracing.Symbols.IStackSnapshot * Microsoft.Windows.EventTracing.Events.IStackEventDataSource -&gt; Microsoft.Windows.EventTracing.Events.IStackEvent" Usage="Microsoft.Windows.EventTracing.Events.StackSnapshotExtensions.GetEvent (stack, eventDataSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.Events.IStackEvent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Windows.EventTracing.Symbols.IStackSnapshot" RefType="this" />
          <Parameter Name="eventDataSource" Type="Microsoft.Windows.EventTracing.Events.IStackEventDataSource" />
        </Parameters>
        <Docs>
          <param name="stack">To be added.</param>
          <param name="eventDataSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Events.StackSnapshotExtensions" Member="M:Microsoft.Windows.EventTracing.Events.StackSnapshotExtensions.GetEvent(Microsoft.Windows.EventTracing.Symbols.IStackSnapshot,Microsoft.Windows.EventTracing.Events.IStackEventDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseClassicEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IClassicEventDataSource&gt; UseClassicEvents (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IClassicEventDataSource&gt; UseClassicEvents(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseClassicEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseClassicEvents (trace As ITraceSource) As IPendingResult(Of IClassicEventDataSource)" />
        <MemberSignature Language="F#" Value="static member UseClassicEvents : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IClassicEventDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseClassicEvents trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IClassicEventDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides classic ETW events from a trace, which do not include schema information.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseClassicEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseGenericEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseGenericEvents (trace As ITraceSource) As IPendingResult(Of IGenericEventDataSource)" />
        <MemberSignature Language="F#" Value="static member UseGenericEvents : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides manifested and TraceLogging events from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseGenericEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents (this Microsoft.Windows.EventTracing.ITraceSource trace, Microsoft.Windows.EventTracing.Events.GenericEventSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents(class Microsoft.Windows.EventTracing.ITraceSource trace, class Microsoft.Windows.EventTracing.Events.GenericEventSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.Events.GenericEventSettings)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseGenericEvents (trace As ITraceSource, settings As GenericEventSettings) As IPendingResult(Of IGenericEventDataSource)" />
        <MemberSignature Language="F#" Value="static member UseGenericEvents : Microsoft.Windows.EventTracing.ITraceSource * Microsoft.Windows.EventTracing.Events.GenericEventSettings -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents (trace, settings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Windows.EventTracing.Events.GenericEventSettings" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="settings">Settings that indicate which events to process and how to process them.</param>
          <summary>Provides a subset of manifested or TraceLogging events from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.Events.GenericEventSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseGenericEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents (this Microsoft.Windows.EventTracing.ITraceSource trace, params Guid[] providerIds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt; UseGenericEvents(class Microsoft.Windows.EventTracing.ITraceSource trace, valuetype System.Guid[] providerIds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource,System.Guid[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseGenericEvents (trace As ITraceSource, ParamArray providerIds As Guid()) As IPendingResult(Of IGenericEventDataSource)" />
        <MemberSignature Language="F#" Value="static member UseGenericEvents : Microsoft.Windows.EventTracing.ITraceSource * Guid[] -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents (trace, providerIds)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IGenericEventDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="providerIds" Type="System.Guid[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="providerIds">A list of provider IDs to filter which events to process.</param>
          <summary>Provides a subset of manifested or TraceLogging events from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseGenericEvents(Microsoft.Windows.EventTracing.ITraceSource,System.Guid[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseStackEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IStackEventDataSource&gt; UseStackEvents (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IStackEventDataSource&gt; UseStackEvents(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseStackEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseStackEvents (trace As ITraceSource) As IPendingResult(Of IStackEventDataSource)" />
        <MemberSignature Language="F#" Value="static member UseStackEvents : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IStackEventDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseStackEvents trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IStackEventDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about events associated with stacks recorded during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseStackEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseTraceStatistics">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.ITraceStatisticsDataSource&gt; UseTraceStatistics (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.ITraceStatisticsDataSource&gt; UseTraceStatistics(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseTraceStatistics(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTraceStatistics (trace As ITraceSource) As IPendingResult(Of ITraceStatisticsDataSource)" />
        <MemberSignature Language="F#" Value="static member UseTraceStatistics : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.ITraceStatisticsDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseTraceStatistics trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.ITraceStatisticsDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides statistics about the events in a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseTraceStatistics(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseWindowsTracePreprocessorEvents">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IWindowsTracePreprocessorDataSource&gt; UseWindowsTracePreprocessorEvents (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Events.IWindowsTracePreprocessorDataSource&gt; UseWindowsTracePreprocessorEvents(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseWindowsTracePreprocessorEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWindowsTracePreprocessorEvents (trace As ITraceSource) As IPendingResult(Of IWindowsTracePreprocessorDataSource)" />
        <MemberSignature Language="F#" Value="static member UseWindowsTracePreprocessorEvents : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IWindowsTracePreprocessorDataSource&gt;" Usage="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseWindowsTracePreprocessorEvents trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Events.IWindowsTracePreprocessorDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides Windows software trace preprocessor (WPP) events from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.EventsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.EventsTraceSourceExtensions.UseWindowsTracePreprocessorEvents(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseDirectXData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Graphics.IDirectXDataSource&gt; UseDirectXData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Graphics.IDirectXDataSource&gt; UseDirectXData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.GraphicsTraceSourceExtensions.UseDirectXData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDirectXData (trace As ITraceSource) As IPendingResult(Of IDirectXDataSource)" />
        <MemberSignature Language="F#" Value="static member UseDirectXData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Graphics.IDirectXDataSource&gt;" Usage="Microsoft.Windows.EventTracing.GraphicsTraceSourceExtensions.UseDirectXData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Graphics.IDirectXDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about DirectX activity.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.GraphicsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.GraphicsTraceSourceExtensions.UseDirectXData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseHypercalls">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypercallDataSource&gt; UseHypercalls (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.HyperV.IHypercallDataSource&gt; UseHypercalls(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypercalls(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHypercalls (trace As ITraceSource) As IPendingResult(Of IHypercallDataSource)" />
        <MemberSignature Language="F#" Value="static member UseHypercalls : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypercallDataSource&gt;" Usage="Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypercalls trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypercallDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about Hyper-V hypercalls that occured during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypercalls(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseHypervisorPartitionData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypervisorPartitionDataSource&gt; UseHypervisorPartitionData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.HyperV.IHypervisorPartitionDataSource&gt; UseHypervisorPartitionData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypervisorPartitionData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHypervisorPartitionData (trace As ITraceSource) As IPendingResult(Of IHypervisorPartitionDataSource)" />
        <MemberSignature Language="F#" Value="static member UseHypervisorPartitionData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypervisorPartitionDataSource&gt;" Usage="Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypervisorPartitionData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.HyperV.IHypervisorPartitionDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data about the Hyper-V partition the trace was recorded in.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.HyperVTraceSourceExtensions.UseHypervisorPartitionData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseHandles">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHandleDataSource&gt; UseHandles (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IHandleDataSource&gt; UseHandles(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHandles(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHandles (trace As ITraceSource) As IPendingResult(Of IHandleDataSource)" />
        <MemberSignature Language="F#" Value="static member UseHandles : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHandleDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHandles trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHandleDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides partial data from a trace about active kernel handles.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHandles(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseHardFaults">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHardFaultDataSource&gt; UseHardFaults (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IHardFaultDataSource&gt; UseHardFaults(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHardFaults(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHardFaults (trace As ITraceSource) As IPendingResult(Of IHardFaultDataSource)" />
        <MemberSignature Language="F#" Value="static member UseHardFaults : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHardFaultDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHardFaults trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHardFaultDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about hard page faults.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHardFaults(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseHeapSnapshots">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHeapSnapshotDataSource&gt; UseHeapSnapshots (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IHeapSnapshotDataSource&gt; UseHeapSnapshots(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHeapSnapshots(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHeapSnapshots (trace As ITraceSource) As IPendingResult(Of IHeapSnapshotDataSource)" />
        <MemberSignature Language="F#" Value="static member UseHeapSnapshots : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHeapSnapshotDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHeapSnapshots trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IHeapSnapshotDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about process heap usage.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseHeapSnapshots(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseMemoryUtilizationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IMemoryUtilizationDataSource&gt; UseMemoryUtilizationData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IMemoryUtilizationDataSource&gt; UseMemoryUtilizationData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseMemoryUtilizationData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMemoryUtilizationData (trace As ITraceSource) As IPendingResult(Of IMemoryUtilizationDataSource)" />
        <MemberSignature Language="F#" Value="static member UseMemoryUtilizationData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IMemoryUtilizationDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseMemoryUtilizationData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IMemoryUtilizationDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about total system memory utilization.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseMemoryUtilizationData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePoolAllocations">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IPoolAllocationDataSource&gt; UsePoolAllocations (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IPoolAllocationDataSource&gt; UsePoolAllocations(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UsePoolAllocations(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePoolAllocations (trace As ITraceSource) As IPendingResult(Of IPoolAllocationDataSource)" />
        <MemberSignature Language="F#" Value="static member UsePoolAllocations : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IPoolAllocationDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UsePoolAllocations trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IPoolAllocationDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about kernel pool memory usage.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UsePoolAllocations(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseReferenceSetData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IReferenceSetDataSource&gt; UseReferenceSetData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IReferenceSetDataSource&gt; UseReferenceSetData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseReferenceSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseReferenceSetData (trace As ITraceSource) As IPendingResult(Of IReferenceSetDataSource)" />
        <MemberSignature Language="F#" Value="static member UseReferenceSetData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IReferenceSetDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseReferenceSetData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IReferenceSetDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about pages of virtual memory used by each process.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseReferenceSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseResidentSetData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IResidentSetDataSource&gt; UseResidentSetData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IResidentSetDataSource&gt; UseResidentSetData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseResidentSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseResidentSetData (trace As ITraceSource) As IPendingResult(Of IResidentSetDataSource)" />
        <MemberSignature Language="F#" Value="static member UseResidentSetData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IResidentSetDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseResidentSetData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IResidentSetDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about the pages of virtual memory for each process that were resident in physical
            memory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseResidentSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseWorkingSetData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IWorkingSetDataSource&gt; UseWorkingSetData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Memory.IWorkingSetDataSource&gt; UseWorkingSetData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseWorkingSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWorkingSetData (trace As ITraceSource) As IPendingResult(Of IWorkingSetDataSource)" />
        <MemberSignature Language="F#" Value="static member UseWorkingSetData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IWorkingSetDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseWorkingSetData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Memory.IWorkingSetDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about pages of virtual memory that were in the working set for each process or
            kernel category.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MemoryTraceSourceExtensions.UseWorkingSetData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseMarks">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IMarkDataSource&gt; UseMarks (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Metadata.IMarkDataSource&gt; UseMarks(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseMarks(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMarks (trace As ITraceSource) As IPendingResult(Of IMarkDataSource)" />
        <MemberSignature Language="F#" Value="static member UseMarks : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IMarkDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseMarks trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IMarkDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides the marks (labeled timestamps) from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseMarks(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseRundownData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IRundownDataSource&gt; UseRundownData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Metadata.IRundownDataSource&gt; UseRundownData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseRundownData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseRundownData (trace As ITraceSource) As IPendingResult(Of IRundownDataSource)" />
        <MemberSignature Language="F#" Value="static member UseRundownData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IRundownDataSource&gt;" Usage="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseRundownData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.IRundownDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about intervals during which trace rundown data collection occurred.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseRundownData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseSystemMetadata">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.ISystemMetadata&gt; UseSystemMetadata (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Metadata.ISystemMetadata&gt; UseSystemMetadata(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseSystemMetadata(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSystemMetadata (trace As ITraceSource) As IPendingResult(Of ISystemMetadata)" />
        <MemberSignature Language="F#" Value="static member UseSystemMetadata : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.ISystemMetadata&gt;" Usage="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseSystemMetadata trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Metadata.ISystemMetadata&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides general, system-wide metadata from a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.MetadataTraceSourceExtensions.UseSystemMetadata(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseWinINetData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Network.IWinINetDataSource&gt; UseWinINetData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Network.IWinINetDataSource&gt; UseWinINetData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.NetworkTraceSourceExtensions.UseWinINetData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWinINetData (trace As ITraceSource) As IPendingResult(Of IWinINetDataSource)" />
        <MemberSignature Language="F#" Value="static member UseWinINetData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Network.IWinINetDataSource&gt;" Usage="Microsoft.Windows.EventTracing.NetworkTraceSourceExtensions.UseWinINetData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Network.IWinINetDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about internet activity via Windows Internet (WinINet).</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.NetworkTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.NetworkTraceSourceExtensions.UseWinINetData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseConnectedStandbyData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IConnectedStandbyDataSource&gt; UseConnectedStandbyData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IConnectedStandbyDataSource&gt; UseConnectedStandbyData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseConnectedStandbyData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseConnectedStandbyData (trace As ITraceSource) As IPendingResult(Of IConnectedStandbyDataSource)" />
        <MemberSignature Language="F#" Value="static member UseConnectedStandbyData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IConnectedStandbyDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseConnectedStandbyData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IConnectedStandbyDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about the system entering and exiting connected standby.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseConnectedStandbyData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseCpuIdleStates">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ICpuIdleStateDataSource&gt; UseCpuIdleStates (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.ICpuIdleStateDataSource&gt; UseCpuIdleStates(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseCpuIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseCpuIdleStates (trace As ITraceSource) As IPendingResult(Of ICpuIdleStateDataSource)" />
        <MemberSignature Language="F#" Value="static member UseCpuIdleStates : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ICpuIdleStateDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseCpuIdleStates trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ICpuIdleStateDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about CPU C-states.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseCpuIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseDevicePowerData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IDevicePowerDataSource&gt; UseDevicePowerData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IDevicePowerDataSource&gt; UseDevicePowerData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseDevicePowerData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDevicePowerData (trace As ITraceSource) As IPendingResult(Of IDevicePowerDataSource)" />
        <MemberSignature Language="F#" Value="static member UseDevicePowerData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IDevicePowerDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseDevicePowerData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IDevicePowerDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about device D-states.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseDevicePowerData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseEnergyEstimationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyEstimationDataSource&gt; UseEnergyEstimationData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IEnergyEstimationDataSource&gt; UseEnergyEstimationData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyEstimationData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEnergyEstimationData (trace As ITraceSource) As IPendingResult(Of IEnergyEstimationDataSource)" />
        <MemberSignature Language="F#" Value="static member UseEnergyEstimationData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyEstimationDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyEstimationData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyEstimationDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about estimated per-process energy usage from Energy Estimation Engine.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyEstimationData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseEnergyMeterData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyMeterDataSource&gt; UseEnergyMeterData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IEnergyMeterDataSource&gt; UseEnergyMeterData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyMeterData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEnergyMeterData (trace As ITraceSource) As IPendingResult(Of IEnergyMeterDataSource)" />
        <MemberSignature Language="F#" Value="static member UseEnergyMeterData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyMeterDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyMeterData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IEnergyMeterDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about measured energy usage from Energy Meter Interface (EMI).
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseEnergyMeterData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePlatformIdleStates">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPlatformIdleStateDataSource&gt; UsePlatformIdleStates (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IPlatformIdleStateDataSource&gt; UsePlatformIdleStates(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePlatformIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePlatformIdleStates (trace As ITraceSource) As IPendingResult(Of IPlatformIdleStateDataSource)" />
        <MemberSignature Language="F#" Value="static member UsePlatformIdleStates : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPlatformIdleStateDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePlatformIdleStates trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPlatformIdleStateDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the target and actual platform idle states of a system.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePlatformIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePowerConfigurationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerConfigurationDataSource&gt; UsePowerConfigurationData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IPowerConfigurationDataSource&gt; UsePowerConfigurationData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerConfigurationData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePowerConfigurationData (trace As ITraceSource) As IPendingResult(Of IPowerConfigurationDataSource)" />
        <MemberSignature Language="F#" Value="static member UsePowerConfigurationData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerConfigurationDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerConfigurationData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerConfigurationDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about system power configuration.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerConfigurationData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePowerDependencyCoordinatorData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerDependencyCoordinatorDataSource&gt; UsePowerDependencyCoordinatorData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IPowerDependencyCoordinatorDataSource&gt; UsePowerDependencyCoordinatorData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerDependencyCoordinatorData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePowerDependencyCoordinatorData (trace As ITraceSource) As IPendingResult(Of IPowerDependencyCoordinatorDataSource)" />
        <MemberSignature Language="F#" Value="static member UsePowerDependencyCoordinatorData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerDependencyCoordinatorDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerDependencyCoordinatorData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IPowerDependencyCoordinatorDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about active power dependency coordinator phases.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UsePowerDependencyCoordinatorData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorFrequencyData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorFrequencyDataSource&gt; UseProcessorFrequencyData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorFrequencyDataSource&gt; UseProcessorFrequencyData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorFrequencyData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorFrequencyData (trace As ITraceSource) As IPendingResult(Of IProcessorFrequencyDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorFrequencyData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorFrequencyDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorFrequencyData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorFrequencyDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the frequency at which processors ran.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorFrequencyData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorParkingData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingDataSource&gt; UseProcessorParkingData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorParkingDataSource&gt; UseProcessorParkingData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorParkingData (trace As ITraceSource) As IPendingResult(Of IProcessorParkingDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorParkingData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about which processors were parked or unparked.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorParkingLimits">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingLimitDataSource&gt; UseProcessorParkingLimits (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorParkingLimitDataSource&gt; UseProcessorParkingLimits(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingLimits(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorParkingLimits (trace As ITraceSource) As IPendingResult(Of IProcessorParkingLimitDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorParkingLimits : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingLimitDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingLimits trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorParkingLimitDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the maximum allowed number of unparked processors.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorParkingLimits(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorProfileData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorProfileDataSource&gt; UseProcessorProfileData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorProfileDataSource&gt; UseProcessorProfileData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorProfileData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorProfileData (trace As ITraceSource) As IPendingResult(Of IProcessorProfileDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorProfileData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorProfileDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorProfileData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorProfileDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the active processor power profile.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorProfileData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorQualityOfServiceData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorQualityOfServiceDataSource&gt; UseProcessorQualityOfServiceData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorQualityOfServiceDataSource&gt; UseProcessorQualityOfServiceData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorQualityOfServiceData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorQualityOfServiceData (trace As ITraceSource) As IPendingResult(Of IProcessorQualityOfServiceDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorQualityOfServiceData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorQualityOfServiceDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorQualityOfServiceData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorQualityOfServiceDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the quality of service level for each processor.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorQualityOfServiceData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcessorThrottlingData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorThrottlingDataSource&gt; UseProcessorThrottlingData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.IProcessorThrottlingDataSource&gt; UseProcessorThrottlingData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorThrottlingData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcessorThrottlingData (trace As ITraceSource) As IPendingResult(Of IProcessorThrottlingDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcessorThrottlingData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorThrottlingDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorThrottlingData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.IProcessorThrottlingDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about processor maximum frequency throttling.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseProcessorThrottlingData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseSystemPowerSourceData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemPowerSourceDataSource&gt; UseSystemPowerSourceData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.ISystemPowerSourceDataSource&gt; UseSystemPowerSourceData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemPowerSourceData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSystemPowerSourceData (trace As ITraceSource) As IPendingResult(Of ISystemPowerSourceDataSource)" />
        <MemberSignature Language="F#" Value="static member UseSystemPowerSourceData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemPowerSourceDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemPowerSourceData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemPowerSourceDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the active system power source (AC vs DC).</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemPowerSourceData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseSystemSleepData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemSleepDataSource&gt; UseSystemSleepData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.ISystemSleepDataSource&gt; UseSystemSleepData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemSleepData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSystemSleepData (trace As ITraceSource) As IPendingResult(Of ISystemSleepDataSource)" />
        <MemberSignature Language="F#" Value="static member UseSystemSleepData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemSleepDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemSleepData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ISystemSleepDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about overall system power state.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseSystemSleepData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseTargetCpuIdleStates">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetCpuIdleStateDataSource&gt; UseTargetCpuIdleStates (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.ITargetCpuIdleStateDataSource&gt; UseTargetCpuIdleStates(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetCpuIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTargetCpuIdleStates (trace As ITraceSource) As IPendingResult(Of ITargetCpuIdleStateDataSource)" />
        <MemberSignature Language="F#" Value="static member UseTargetCpuIdleStates : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetCpuIdleStateDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetCpuIdleStates trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetCpuIdleStateDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about target CPU C-states.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetCpuIdleStates(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseTargetProcessorFrequencyData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetProcessorFrequencyDataSource&gt; UseTargetProcessorFrequencyData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Power.ITargetProcessorFrequencyDataSource&gt; UseTargetProcessorFrequencyData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetProcessorFrequencyData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTargetProcessorFrequencyData (trace As ITraceSource) As IPendingResult(Of ITargetProcessorFrequencyDataSource)" />
        <MemberSignature Language="F#" Value="static member UseTargetProcessorFrequencyData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetProcessorFrequencyDataSource&gt;" Usage="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetProcessorFrequencyData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Power.ITargetProcessorFrequencyDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about target processor frequencies.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.PowerTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.PowerTraceSourceExtensions.UseTargetProcessorFrequencyData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Processes.IImage" />
      </Targets>
      <Member MemberName="GetProcessAddress">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.Address GetProcessAddress (this Microsoft.Windows.EventTracing.Processes.IImage image, Microsoft.Windows.EventTracing.Address relativeVirtualAddress);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.Address GetProcessAddress(class Microsoft.Windows.EventTracing.Processes.IImage image, valuetype Microsoft.Windows.EventTracing.Address relativeVirtualAddress) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Processes.ImageExtensions.GetProcessAddress(Microsoft.Windows.EventTracing.Processes.IImage,Microsoft.Windows.EventTracing.Address)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetProcessAddress (image As IImage, relativeVirtualAddress As Address) As Address" />
        <MemberSignature Language="F#" Value="static member GetProcessAddress : Microsoft.Windows.EventTracing.Processes.IImage * Microsoft.Windows.EventTracing.Address -&gt; Microsoft.Windows.EventTracing.Address" Usage="Microsoft.Windows.EventTracing.Processes.ImageExtensions.GetProcessAddress (image, relativeVirtualAddress)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.Address</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="image" Type="Microsoft.Windows.EventTracing.Processes.IImage" RefType="this" />
          <Parameter Name="relativeVirtualAddress" Type="Microsoft.Windows.EventTracing.Address" />
        </Parameters>
        <Docs>
          <param name="image">The image in which the relative virtual address occurs.</param>
          <param name="relativeVirtualAddress">The relative virtual address.</param>
          <summary>Gets the process virtual address from a relative virtual address for the image.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Processes.ImageExtensions" Member="M:Microsoft.Windows.EventTracing.Processes.ImageExtensions.GetProcessAddress(Microsoft.Windows.EventTracing.Processes.IImage,Microsoft.Windows.EventTracing.Address)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Processes.IProcessDataSource" />
      </Targets>
      <Member MemberName="GetCrashedProcesses">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Processes.IProcess&gt; GetCrashedProcesses (this Microsoft.Windows.EventTracing.Processes.IProcessDataSource processDataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Windows.EventTracing.Processes.IProcess&gt; GetCrashedProcesses(class Microsoft.Windows.EventTracing.Processes.IProcessDataSource processDataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Processes.ProcessDataSourceExtensions.GetCrashedProcesses(Microsoft.Windows.EventTracing.Processes.IProcessDataSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCrashedProcesses (processDataSource As IProcessDataSource) As IReadOnlyList(Of IProcess)" />
        <MemberSignature Language="F#" Value="static member GetCrashedProcesses : Microsoft.Windows.EventTracing.Processes.IProcessDataSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Processes.IProcess&gt;" Usage="Microsoft.Windows.EventTracing.Processes.ProcessDataSourceExtensions.GetCrashedProcesses processDataSource" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Processes.IProcess&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="processDataSource" Type="Microsoft.Windows.EventTracing.Processes.IProcessDataSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="processDataSource">Process data source for this trace.</param>
          <summary>
            Gets the list of crashed processes in this trace.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Processes.ProcessDataSourceExtensions" Member="M:Microsoft.Windows.EventTracing.Processes.ProcessDataSourceExtensions.GetCrashedProcesses(Microsoft.Windows.EventTracing.Processes.IProcessDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Processes.IProcess" />
      </Targets>
      <Member MemberName="GetHostedServices">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Services.IService&gt; GetHostedServices (this Microsoft.Windows.EventTracing.Processes.IProcess process, Microsoft.Windows.EventTracing.Services.IServiceDataSource serviceDataSource, Microsoft.Windows.EventTracing.TraceTimestamp timestamp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Windows.EventTracing.Services.IService&gt; GetHostedServices(class Microsoft.Windows.EventTracing.Processes.IProcess process, class Microsoft.Windows.EventTracing.Services.IServiceDataSource serviceDataSource, valuetype Microsoft.Windows.EventTracing.TraceTimestamp timestamp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Processes.ProcessExtensions.GetHostedServices(Microsoft.Windows.EventTracing.Processes.IProcess,Microsoft.Windows.EventTracing.Services.IServiceDataSource,Microsoft.Windows.EventTracing.TraceTimestamp)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHostedServices (process As IProcess, serviceDataSource As IServiceDataSource, timestamp As TraceTimestamp) As IReadOnlyList(Of IService)" />
        <MemberSignature Language="F#" Value="static member GetHostedServices : Microsoft.Windows.EventTracing.Processes.IProcess * Microsoft.Windows.EventTracing.Services.IServiceDataSource * Microsoft.Windows.EventTracing.TraceTimestamp -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Services.IService&gt;" Usage="Microsoft.Windows.EventTracing.Processes.ProcessExtensions.GetHostedServices (process, serviceDataSource, timestamp)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Services.IService&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.IProcess" RefType="this" />
          <Parameter Name="serviceDataSource" Type="Microsoft.Windows.EventTracing.Services.IServiceDataSource" />
          <Parameter Name="timestamp" Type="Microsoft.Windows.EventTracing.TraceTimestamp" />
        </Parameters>
        <Docs>
          <param name="process">To be added.</param>
          <param name="serviceDataSource">To be added.</param>
          <param name="timestamp">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Processes.ProcessExtensions" Member="M:Microsoft.Windows.EventTracing.Processes.ProcessExtensions.GetHostedServices(Microsoft.Windows.EventTracing.Processes.IProcess,Microsoft.Windows.EventTracing.Services.IServiceDataSource,Microsoft.Windows.EventTracing.TraceTimestamp)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadCreateEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadCreateEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadCreateEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadCreateEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ThreadCreateEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadCreateEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed thread create events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadCreateEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadCreateEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadCreateEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadCreateEvents (streamingTrace As IStreamingTraceSource, consumer As IThreadCreateEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseThreadCreateEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed thread create events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadCreateEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadCreateEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadCreateEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadCreateEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadCreateEvents (streamingTrace As IStreamingTraceSource, process As ThreadCreateEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadCreateEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed thread create events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadCreateEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadCreateEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadExitEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadExitEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ThreadExitEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed thread exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadExitEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadExitEvents (streamingTrace As IStreamingTraceSource, consumer As IThreadExitEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseThreadExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed thread exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadExitEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadExitEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadExitEvents (streamingTrace As IStreamingTraceSource, process As ThreadExitEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed thread exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadExitEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStartEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStartEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ThreadRundownStartEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread rundown start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStartEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStartEvents (streamingTrace As IStreamingTraceSource, consumer As IThreadRundownStartEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed thread rundown start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadRundownStartEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStartEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStartEvents (streamingTrace As IStreamingTraceSource, process As ThreadRundownStartEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread rundown start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadRundownStartEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStopEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStopEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ThreadRundownStopEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread rundown stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStopEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStopEvents (streamingTrace As IStreamingTraceSource, consumer As IThreadRundownStopEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed thread rundown stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadRundownStopEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadRundownStopEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadRundownStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadRundownStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadRundownStopEvents (streamingTrace As IStreamingTraceSource, process As ThreadRundownStopEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadRundownStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread rundown stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadRundownStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadRundownStopEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadSetNameEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadSetNameEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadSetNameEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadSetNameEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ThreadSetNameEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadSetNameEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread set name events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadSetNameEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadSetNameEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadSetNameEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadSetNameEvents (streamingTrace As IStreamingTraceSource, consumer As IThreadSetNameEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseThreadSetNameEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed thread set name events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.IThreadSetNameEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseThreadSetNameEvents">
        <MemberSignature Language="C#" Value="public static void UseThreadSetNameEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseThreadSetNameEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseThreadSetNameEvents (streamingTrace As IStreamingTraceSource, process As ThreadSetNameEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseThreadSetNameEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive parsed thread set name events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesStreamingTraceSourceExtensions.UseThreadSetNameEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Processes.ThreadSetNameEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseImageSections">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IImageSectionDataSource&gt; UseImageSections (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Processes.IImageSectionDataSource&gt; UseImageSections(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseImageSections(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseImageSections (trace As ITraceSource) As IPendingResult(Of IImageSectionDataSource)" />
        <MemberSignature Language="F#" Value="static member UseImageSections : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IImageSectionDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseImageSections trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IImageSectionDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about the sections of an image.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseImageSections(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseProcesses">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IProcessDataSource&gt; UseProcesses (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Processes.IProcessDataSource&gt; UseProcesses(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseProcesses(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseProcesses (trace As ITraceSource) As IPendingResult(Of IProcessDataSource)" />
        <MemberSignature Language="F#" Value="static member UseProcesses : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IProcessDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseProcesses trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IProcessDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about processes active during a trace as well as their images and PDBs.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseProcesses(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseThreads">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt; UseThreads (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt; UseThreads(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseThreads (trace As ITraceSource) As IPendingResult(Of IThreadDataSource)" />
        <MemberSignature Language="F#" Value="static member UseThreads : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about threads active during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseThreads">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt; UseThreads (this Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt; UseThreads(class Microsoft.Windows.EventTracing.ITraceSource trace, bool useLegacyImplementation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseThreads (trace As ITraceSource, Optional useLegacyImplementation As Boolean = false) As IPendingResult(Of IThreadDataSource)" />
        <MemberSignature Language="F#" Value="static member UseThreads : Microsoft.Windows.EventTracing.ITraceSource * bool -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads (trace, useLegacyImplementation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Processes.IThreadDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="useLegacyImplementation" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="useLegacyImplementation">Whether to use a legacy implementation to retrieve this data.</param>
          <summary>Provides data about threads active during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ProcessesTraceSourceExtensions.UseThreads(Microsoft.Windows.EventTracing.ITraceSource,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseRegionsOfInterest">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Regions.IRegionDataSource&gt; UseRegionsOfInterest (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Regions.IRegionDataSource&gt; UseRegionsOfInterest(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.RegionsTraceSourceExtensions.UseRegionsOfInterest(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseRegionsOfInterest (trace As ITraceSource) As IPendingResult(Of IRegionDataSource)" />
        <MemberSignature Language="F#" Value="static member UseRegionsOfInterest : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Regions.IRegionDataSource&gt;" Usage="Microsoft.Windows.EventTracing.RegionsTraceSourceExtensions.UseRegionsOfInterest trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Regions.IRegionDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides named regions of interest intervals from a trace as specified in an xml configuration file.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.RegionsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.RegionsTraceSourceExtensions.UseRegionsOfInterest(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseRegistryData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Registry.IRegistryActivityDataSource&gt; UseRegistryData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Registry.IRegistryActivityDataSource&gt; UseRegistryData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.RegistryTraceSourceExtensions.UseRegistryData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseRegistryData (trace As ITraceSource) As IPendingResult(Of IRegistryActivityDataSource)" />
        <MemberSignature Language="F#" Value="static member UseRegistryData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Registry.IRegistryActivityDataSource&gt;" Usage="Microsoft.Windows.EventTracing.RegistryTraceSourceExtensions.UseRegistryData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Registry.IRegistryActivityDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about registry activity during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.RegistryTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.RegistryTraceSourceExtensions.UseRegistryData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTasks">
        <MemberSignature Language="C#" Value="public static void UseScheduledTasks (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTasks(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTasks (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ScheduledTaskCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTasks : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a consumer to receive scheduled task data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTasks">
        <MemberSignature Language="C#" Value="public static void UseScheduledTasks (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTasks(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTasks (streamingTrace As IStreamingTraceSource, consumer As IScheduledTaskConsumer)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTasks : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the result.</param>
          <summary>Registers a consumer to receive scheduled task data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTasks">
        <MemberSignature Language="C#" Value="public static void UseScheduledTasks (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTasks(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTasks (streamingTrace As IStreamingTraceSource, process As ScheduledTaskCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTasks : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a consumer to receive scheduled task data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStartEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStartEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ScheduledTaskStartEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStartEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStartEvents (streamingTrace As IStreamingTraceSource, consumer As IScheduledTaskStartEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStartEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStartEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStartEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStartEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStartEvents (streamingTrace As IStreamingTraceSource, process As ScheduledTaskStartEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStartEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task start events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStartEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStartEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStopEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStopEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ScheduledTaskStopEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStopEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStopEvents (streamingTrace As IStreamingTraceSource, consumer As IScheduledTaskStopEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskStopEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskStopEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskStopEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskStopEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskStopEvents (streamingTrace As IStreamingTraceSource, process As ScheduledTaskStopEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskStopEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task stop events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskStopEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskStopEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskTriggerEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskTriggerEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskTriggerEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskTriggerEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As ScheduledTaskTriggerEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskTriggerEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task trigger events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskTriggerEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskTriggerEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskTriggerEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskTriggerEvents (streamingTrace As IStreamingTraceSource, consumer As IScheduledTaskTriggerEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskTriggerEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task trigger events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskTriggerEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTaskTriggerEvents">
        <MemberSignature Language="C#" Value="public static void UseScheduledTaskTriggerEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseScheduledTaskTriggerEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseScheduledTaskTriggerEvents (streamingTrace As IStreamingTraceSource, process As ScheduledTaskTriggerEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTaskTriggerEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed scheduled task trigger events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskStreamingTraceSourceExtensions.UseScheduledTaskTriggerEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ScheduledTasks.ScheduledTaskTriggerEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseScheduledTasks">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskDataSource&gt; UseScheduledTasks (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskDataSource&gt; UseScheduledTasks(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ScheduledTaskTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseScheduledTasks (trace As ITraceSource) As IPendingResult(Of IScheduledTaskDataSource)" />
        <MemberSignature Language="F#" Value="static member UseScheduledTasks : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ScheduledTaskTraceSourceExtensions.UseScheduledTasks trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.ScheduledTasks.IScheduledTaskDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about scheduled tasks that ran during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ScheduledTaskTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ScheduledTaskTraceSourceExtensions.UseScheduledTasks(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Services.IServiceDataSource&gt; UseServices (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Services.IServiceDataSource&gt; UseServices(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.ServicesTraceSourceExtensions.UseServices(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseServices (trace As ITraceSource) As IPendingResult(Of IServiceDataSource)" />
        <MemberSignature Language="F#" Value="static member UseServices : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Services.IServiceDataSource&gt;" Usage="Microsoft.Windows.EventTracing.ServicesTraceSourceExtensions.UseServices trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Services.IServiceDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about services that were active or had their state captured during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.ServicesTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.ServicesTraceSourceExtensions.UseServices(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseUnparsedEvents">
        <MemberSignature Language="C#" Value="public static void UseUnparsedEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseUnparsedEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseUnparsedEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseUnparsedEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseUnparsedEvents">
        <MemberSignature Language="C#" Value="public static void UseUnparsedEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.IEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseUnparsedEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.IEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.IEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseUnparsedEvents (streamingTrace As IStreamingTraceSource, consumer As IEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseUnparsedEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.IEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.IEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The event consumer to register.</param>
          <summary>Registers a consumer to receive events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.IEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseUnparsedEvents">
        <MemberSignature Language="C#" Value="public static void UseUnparsedEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseUnparsedEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseUnparsedEvents (streamingTrace As IStreamingTraceSource, process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseUnparsedEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseUnparsedEvents">
        <MemberSignature Language="C#" Value="public static void UseUnparsedEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, System.Collections.Generic.IReadOnlyList&lt;Guid&gt; providerIds, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseUnparsedEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Guid&gt; providerIds, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseUnparsedEvents (streamingTrace As IStreamingTraceSource, providerIds As IReadOnlyList(Of Guid), schedule As ConsumerSchedule, process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseUnparsedEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * System.Collections.Generic.IReadOnlyList&lt;Guid&gt; * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents (streamingTrace, providerIds, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="providerIds" Type="System.Collections.Generic.IReadOnlyList&lt;System.Guid&gt;" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="providerIds">A list of provider IDs that filters the events the callback will receive.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive events from specified providers when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseUnparsedEvents">
        <MemberSignature Language="C#" Value="public static void UseUnparsedEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, System.Collections.Generic.IReadOnlyList&lt;Guid&gt; providerIds, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseUnparsedEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Guid&gt; providerIds, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseUnparsedEvents (streamingTrace As IStreamingTraceSource, providerIds As IReadOnlyList(Of Guid), process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseUnparsedEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * System.Collections.Generic.IReadOnlyList&lt;Guid&gt; * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents (streamingTrace, providerIds, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="providerIds" Type="System.Collections.Generic.IReadOnlyList&lt;System.Guid&gt;" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="providerIds">A list of provider IDs that filters the events the callback will receive.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive events from specified providers when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.StreamingTraceSourceExtensions.UseUnparsedEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.StackFrame" />
      </Targets>
      <Member MemberName="GetAnalyzerString">
        <MemberSignature Language="C#" Value="public static string GetAnalyzerString (this Microsoft.Windows.EventTracing.Symbols.StackFrame frame);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAnalyzerString(valuetype Microsoft.Windows.EventTracing.Symbols.StackFrame frame) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetAnalyzerString(Microsoft.Windows.EventTracing.Symbols.StackFrame)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAnalyzerString (frame As StackFrame) As String" />
        <MemberSignature Language="F#" Value="static member GetAnalyzerString : Microsoft.Windows.EventTracing.Symbols.StackFrame -&gt; string" Usage="Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetAnalyzerString frame" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="frame" Type="Microsoft.Windows.EventTracing.Symbols.StackFrame" RefType="this" />
        </Parameters>
        <Docs>
          <param name="frame">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetAnalyzerString(Microsoft.Windows.EventTracing.Symbols.StackFrame)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.StackFrame" />
      </Targets>
      <Member MemberName="GetDebuggerString">
        <MemberSignature Language="C#" Value="public static string GetDebuggerString (this Microsoft.Windows.EventTracing.Symbols.StackFrame frame);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDebuggerString(valuetype Microsoft.Windows.EventTracing.Symbols.StackFrame frame) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetDebuggerString(Microsoft.Windows.EventTracing.Symbols.StackFrame)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDebuggerString (frame As StackFrame) As String" />
        <MemberSignature Language="F#" Value="static member GetDebuggerString : Microsoft.Windows.EventTracing.Symbols.StackFrame -&gt; string" Usage="Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetDebuggerString frame" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="frame" Type="Microsoft.Windows.EventTracing.Symbols.StackFrame" RefType="this" />
        </Parameters>
        <Docs>
          <param name="frame">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.StackFrameExtensions.GetDebuggerString(Microsoft.Windows.EventTracing.Symbols.StackFrame)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource" />
      </Targets>
      <Member MemberName="LoadSymbolsForConsoleAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadSymbolsForConsoleAsync (this Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource dataSource, Microsoft.Windows.EventTracing.Symbols.ISymCachePath symCachePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadSymbolsForConsoleAsync(class Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource dataSource, class Microsoft.Windows.EventTracing.Symbols.ISymCachePath symCachePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync(Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource,Microsoft.Windows.EventTracing.Symbols.ISymCachePath)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadSymbolsForConsoleAsync (dataSource As ISymbolDataSource, symCachePath As ISymCachePath) As Task" />
        <MemberSignature Language="F#" Value="static member LoadSymbolsForConsoleAsync : Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource * Microsoft.Windows.EventTracing.Symbols.ISymCachePath -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync (dataSource, symCachePath)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dataSource" Type="Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource" RefType="this" />
          <Parameter Name="symCachePath" Type="Microsoft.Windows.EventTracing.Symbols.ISymCachePath" />
        </Parameters>
        <Docs>
          <param name="dataSource">To be added.</param>
          <param name="symCachePath">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync(Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource,Microsoft.Windows.EventTracing.Symbols.ISymCachePath)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource" />
      </Targets>
      <Member MemberName="LoadSymbolsForConsoleAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LoadSymbolsForConsoleAsync (this Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource dataSource, Microsoft.Windows.EventTracing.Symbols.ISymCachePath symCachePath, Microsoft.Windows.EventTracing.Symbols.ISymbolPath symbolPath = default, string[] includedProcesses = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LoadSymbolsForConsoleAsync(class Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource dataSource, class Microsoft.Windows.EventTracing.Symbols.ISymCachePath symCachePath, class Microsoft.Windows.EventTracing.Symbols.ISymbolPath symbolPath, string[] includedProcesses) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync(Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource,Microsoft.Windows.EventTracing.Symbols.ISymCachePath,Microsoft.Windows.EventTracing.Symbols.ISymbolPath,System.String[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadSymbolsForConsoleAsync (dataSource As ISymbolDataSource, symCachePath As ISymCachePath, Optional symbolPath As ISymbolPath = null, Optional includedProcesses As String() = null) As Task" />
        <MemberSignature Language="F#" Value="static member LoadSymbolsForConsoleAsync : Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource * Microsoft.Windows.EventTracing.Symbols.ISymCachePath * Microsoft.Windows.EventTracing.Symbols.ISymbolPath * string[] -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync (dataSource, symCachePath, symbolPath, includedProcesses)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dataSource" Type="Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource" RefType="this" />
          <Parameter Name="symCachePath" Type="Microsoft.Windows.EventTracing.Symbols.ISymCachePath" />
          <Parameter Name="symbolPath" Type="Microsoft.Windows.EventTracing.Symbols.ISymbolPath" />
          <Parameter Name="includedProcesses" Type="System.String[]" />
        </Parameters>
        <Docs>
          <param name="dataSource">To be added.</param>
          <param name="symCachePath">To be added.</param>
          <param name="symbolPath">To be added.</param>
          <param name="includedProcesses">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.SymbolDataSourceExtensions.LoadSymbolsForConsoleAsync(Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource,Microsoft.Windows.EventTracing.Symbols.ISymCachePath,Microsoft.Windows.EventTracing.Symbols.ISymbolPath,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.IThreadStack" />
      </Targets>
      <Member MemberName="GetAnalyzerString">
        <MemberSignature Language="C#" Value="public static string GetAnalyzerString (this Microsoft.Windows.EventTracing.Symbols.IThreadStack stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAnalyzerString(class Microsoft.Windows.EventTracing.Symbols.IThreadStack stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetAnalyzerString(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAnalyzerString (stack As IThreadStack) As String" />
        <MemberSignature Language="F#" Value="static member GetAnalyzerString : Microsoft.Windows.EventTracing.Symbols.IThreadStack -&gt; string" Usage="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetAnalyzerString stack" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Windows.EventTracing.Symbols.IThreadStack" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stack">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetAnalyzerString(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.IThreadStack" />
      </Targets>
      <Member MemberName="GetDebuggerString">
        <MemberSignature Language="C#" Value="public static string GetDebuggerString (this Microsoft.Windows.EventTracing.Symbols.IThreadStack stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDebuggerString(class Microsoft.Windows.EventTracing.Symbols.IThreadStack stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerString(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDebuggerString (stack As IThreadStack) As String" />
        <MemberSignature Language="F#" Value="static member GetDebuggerString : Microsoft.Windows.EventTracing.Symbols.IThreadStack -&gt; string" Usage="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerString stack" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Windows.EventTracing.Symbols.IThreadStack" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stack">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerString(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.IThreadStack" />
      </Targets>
      <Member MemberName="GetDebuggerStringList">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;string&gt; GetDebuggerStringList (this Microsoft.Windows.EventTracing.Symbols.IThreadStack stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; GetDebuggerStringList(class Microsoft.Windows.EventTracing.Symbols.IThreadStack stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerStringList(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDebuggerStringList (stack As IThreadStack) As IReadOnlyList(Of String)" />
        <MemberSignature Language="F#" Value="static member GetDebuggerStringList : Microsoft.Windows.EventTracing.Symbols.IThreadStack -&gt; System.Collections.Generic.IReadOnlyList&lt;string&gt;" Usage="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerStringList stack" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Windows.EventTracing.Symbols.IThreadStack" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stack">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.GetDebuggerStringList(Microsoft.Windows.EventTracing.Symbols.IThreadStack)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Symbols.IThreadStack" />
      </Targets>
      <Member MemberName="Matches">
        <MemberSignature Language="C#" Value="public static bool Matches (this Microsoft.Windows.EventTracing.Symbols.IThreadStack threadStack, Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern threadStackPattern);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Matches(class Microsoft.Windows.EventTracing.Symbols.IThreadStack threadStack, class Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern threadStackPattern) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.Matches(Microsoft.Windows.EventTracing.Symbols.IThreadStack,Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Matches (threadStack As IThreadStack, threadStackPattern As IThreadStackPattern) As Boolean" />
        <MemberSignature Language="F#" Value="static member Matches : Microsoft.Windows.EventTracing.Symbols.IThreadStack * Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern -&gt; bool" Usage="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.Matches (threadStack, threadStackPattern)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="threadStack" Type="Microsoft.Windows.EventTracing.Symbols.IThreadStack" RefType="this" />
          <Parameter Name="threadStackPattern" Type="Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern" />
        </Parameters>
        <Docs>
          <param name="threadStack">To be added.</param>
          <param name="threadStackPattern">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions" Member="M:Microsoft.Windows.EventTracing.Symbols.ThreadStackExtensions.Matches(Microsoft.Windows.EventTracing.Symbols.IThreadStack,Microsoft.Windows.EventTracing.Symbols.IThreadStackPattern)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseStacks">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackDataSource&gt; UseStacks (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Symbols.IStackDataSource&gt; UseStacks(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStacks(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseStacks (trace As ITraceSource) As IPendingResult(Of IStackDataSource)" />
        <MemberSignature Language="F#" Value="static member UseStacks : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackDataSource&gt;" Usage="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStacks trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about stacks recorded during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStacks(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseStackTags">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackTagDataSource&gt; UseStackTags (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Symbols.IStackTagDataSource&gt; UseStackTags(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStackTags(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseStackTags (trace As ITraceSource) As IPendingResult(Of IStackTagDataSource)" />
        <MemberSignature Language="F#" Value="static member UseStackTags : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackTagDataSource&gt;" Usage="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStackTags trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.IStackTagDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides a mapper that groups stacks from a trace into stack tags as specified in an XML configuration file.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseStackTags(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseSymbols">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource&gt; UseSymbols (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource&gt; UseSymbols(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseSymbols(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSymbols (trace As ITraceSource) As IPendingResult(Of ISymbolDataSource)" />
        <MemberSignature Language="F#" Value="static member UseSymbols : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource&gt;" Usage="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseSymbols trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Symbols.ISymbolDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides the ability to load symbols for a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SymbolsTraceSourceExtensions.UseSymbols(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Syscalls.Syscall" />
      </Targets>
      <Member MemberName="GetThread">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.Processes.IThread GetThread (this Microsoft.Windows.EventTracing.Syscalls.Syscall syscall, Microsoft.Windows.EventTracing.Processes.IThreadDataSource threadDataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.Processes.IThread GetThread(valuetype Microsoft.Windows.EventTracing.Syscalls.Syscall syscall, class Microsoft.Windows.EventTracing.Processes.IThreadDataSource threadDataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Syscalls.SyscallExtensions.GetThread(Microsoft.Windows.EventTracing.Syscalls.Syscall,Microsoft.Windows.EventTracing.Processes.IThreadDataSource)" />
        <MemberSignature Language="F#" Value="static member GetThread : Microsoft.Windows.EventTracing.Syscalls.Syscall * Microsoft.Windows.EventTracing.Processes.IThreadDataSource -&gt; Microsoft.Windows.EventTracing.Processes.IThread" Usage="Microsoft.Windows.EventTracing.Syscalls.SyscallExtensions.GetThread (syscall, threadDataSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.Processes.IThread</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="syscall" Type="Microsoft.Windows.EventTracing.Syscalls.Syscall" RefType="this" />
          <Parameter Name="threadDataSource" Type="Microsoft.Windows.EventTracing.Processes.IThreadDataSource" />
        </Parameters>
        <Docs>
          <param name="syscall">To be added.</param>
          <param name="threadDataSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Syscalls.SyscallExtensions" Member="M:Microsoft.Windows.EventTracing.Syscalls.SyscallExtensions.GetThread(Microsoft.Windows.EventTracing.Syscalls.Syscall,Microsoft.Windows.EventTracing.Processes.IThreadDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallEnterEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallEnterEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallEnterEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallEnterEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As SyscallEnterEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscallEnterEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed syscall enter events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallEnterEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallEnterEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallEnterEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallEnterEvents (streamingTrace As IStreamingTraceSource, consumer As ISyscallEnterEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseSyscallEnterEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed syscall enter events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallEnterEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallEnterEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallEnterEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallEnterEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallEnterEvents (streamingTrace As IStreamingTraceSource, process As SyscallEnterEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscallEnterEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed syscall enter events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallEnterEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallEnterEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallExitEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallExitEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As SyscallExitEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscallExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed syscall exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallExitEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallExitEvents (streamingTrace As IStreamingTraceSource, consumer As ISyscallExitEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseSyscallExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>Registers a consumer to receive parsed syscall exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallExitEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscallExitEvents">
        <MemberSignature Language="C#" Value="public static void UseSyscallExitEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscallExitEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscallExitEvents (streamingTrace As IStreamingTraceSource, process As SyscallExitEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscallExitEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive parsed syscall exit events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscallExitEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallExitEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscalls">
        <MemberSignature Language="C#" Value="public static void UseSyscalls (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.Syscalls.SyscallCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscalls(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.Syscalls.SyscallCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscalls (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As SyscallCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscalls : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.Syscalls.SyscallCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive system call data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.Syscalls.SyscallCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscalls">
        <MemberSignature Language="C#" Value="public static void UseSyscalls (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscalls(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscalls (streamingTrace As IStreamingTraceSource, consumer As ISyscallConsumer)" />
        <MemberSignature Language="F#" Value="static member UseSyscalls : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the result.</param>
          <summary>Registers a consumer to receive system call data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.ISyscallConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSyscalls">
        <MemberSignature Language="C#" Value="public static void UseSyscalls (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.Syscalls.SyscallCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSyscalls(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.Syscalls.SyscallCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSyscalls (streamingTrace As IStreamingTraceSource, process As SyscallCallback)" />
        <MemberSignature Language="F#" Value="static member UseSyscalls : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.Syscalls.SyscallCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.Syscalls.SyscallCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive system call data when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallStreamingTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.Syscalls.SyscallCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseSyscalls">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Syscalls.ISyscallDataSource&gt; UseSyscalls (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Syscalls.ISyscallDataSource&gt; UseSyscalls(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.SyscallTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSyscalls (trace As ITraceSource) As IPendingResult(Of ISyscallDataSource)" />
        <MemberSignature Language="F#" Value="static member UseSyscalls : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Syscalls.ISyscallDataSource&gt;" Usage="Microsoft.Windows.EventTracing.SyscallTraceSourceExtensions.UseSyscalls trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Syscalls.ISyscallDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data about syscalls that occurred during a trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.SyscallTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.SyscallTraceSourceExtensions.UseSyscalls(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceProcessor" />
      </Targets>
      <Member MemberName="Process">
        <MemberSignature Language="C#" Value="public static void Process (this Microsoft.Windows.EventTracing.ITraceProcessor traceProcessor, System.IO.Stream outputStream, System.IO.Stream errorStream);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Process(class Microsoft.Windows.EventTracing.ITraceProcessor traceProcessor, class System.IO.Stream outputStream, class System.IO.Stream errorStream) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process(Microsoft.Windows.EventTracing.ITraceProcessor,System.IO.Stream,System.IO.Stream)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Process (traceProcessor As ITraceProcessor, outputStream As Stream, errorStream As Stream)" />
        <MemberSignature Language="F#" Value="static member Process : Microsoft.Windows.EventTracing.ITraceProcessor * System.IO.Stream * System.IO.Stream -&gt; unit" Usage="Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process (traceProcessor, outputStream, errorStream)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceProcessor" Type="Microsoft.Windows.EventTracing.ITraceProcessor" RefType="this" />
          <Parameter Name="outputStream" Type="System.IO.Stream" />
          <Parameter Name="errorStream" Type="System.IO.Stream" />
        </Parameters>
        <Docs>
          <param name="traceProcessor">To be added.</param>
          <param name="outputStream">To be added.</param>
          <param name="errorStream">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceProcessorExtensions" Member="M:Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process(Microsoft.Windows.EventTracing.ITraceProcessor,System.IO.Stream,System.IO.Stream)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceProcessor" />
      </Targets>
      <Member MemberName="Process">
        <MemberSignature Language="C#" Value="public static void Process (this Microsoft.Windows.EventTracing.ITraceProcessor traceProcessor, System.IO.Stream outputStream, System.IO.Stream errorStream, IProgress&lt;Microsoft.Windows.EventTracing.TraceProcessingProgress&gt; progressCallback = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Process(class Microsoft.Windows.EventTracing.ITraceProcessor traceProcessor, class System.IO.Stream outputStream, class System.IO.Stream errorStream, class System.IProgress`1&lt;valuetype Microsoft.Windows.EventTracing.TraceProcessingProgress&gt; progressCallback) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process(Microsoft.Windows.EventTracing.ITraceProcessor,System.IO.Stream,System.IO.Stream,System.IProgress{Microsoft.Windows.EventTracing.TraceProcessingProgress})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Process (traceProcessor As ITraceProcessor, outputStream As Stream, errorStream As Stream, Optional progressCallback As IProgress(Of TraceProcessingProgress) = null)" />
        <MemberSignature Language="F#" Value="static member Process : Microsoft.Windows.EventTracing.ITraceProcessor * System.IO.Stream * System.IO.Stream * IProgress&lt;Microsoft.Windows.EventTracing.TraceProcessingProgress&gt; -&gt; unit" Usage="Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process (traceProcessor, outputStream, errorStream, progressCallback)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceProcessor" Type="Microsoft.Windows.EventTracing.ITraceProcessor" RefType="this" />
          <Parameter Name="outputStream" Type="System.IO.Stream" />
          <Parameter Name="errorStream" Type="System.IO.Stream" />
          <Parameter Name="progressCallback" Type="System.IProgress&lt;Microsoft.Windows.EventTracing.TraceProcessingProgress&gt;" />
        </Parameters>
        <Docs>
          <param name="traceProcessor">To be added.</param>
          <param name="outputStream">To be added.</param>
          <param name="errorStream">To be added.</param>
          <param name="progressCallback">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceProcessorExtensions" Member="M:Microsoft.Windows.EventTracing.TraceProcessorExtensions.Process(Microsoft.Windows.EventTracing.ITraceProcessor,System.IO.Stream,System.IO.Stream,System.IProgress{Microsoft.Windows.EventTracing.TraceProcessingProgress})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="Use">
        <MemberSignature Language="C#" Value="public static void Use (this Microsoft.Windows.EventTracing.ITraceSource trace, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Use(class Microsoft.Windows.EventTracing.ITraceSource trace, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.Use(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Use (trace As ITraceSource, process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member Use : Microsoft.Windows.EventTracing.ITraceSource * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.Use (trace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>Registers a callback to receive events when the trace is processed.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.Use(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="Use">
        <MemberSignature Language="C#" Value="public static void Use (this Microsoft.Windows.EventTracing.ITraceSource trace, System.Collections.Generic.IReadOnlyList&lt;Guid&gt; providerIds, Microsoft.Windows.EventTracing.TraceEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Use(class Microsoft.Windows.EventTracing.ITraceSource trace, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Guid&gt; providerIds, class Microsoft.Windows.EventTracing.TraceEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.Use(Microsoft.Windows.EventTracing.ITraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.TraceEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Use (trace As ITraceSource, providerIds As IReadOnlyList(Of Guid), process As TraceEventCallback)" />
        <MemberSignature Language="F#" Value="static member Use : Microsoft.Windows.EventTracing.ITraceSource * System.Collections.Generic.IReadOnlyList&lt;Guid&gt; * Microsoft.Windows.EventTracing.TraceEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.Use (trace, providerIds, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="providerIds" Type="System.Collections.Generic.IReadOnlyList&lt;System.Guid&gt;" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.TraceEventCallback" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="providerIds">A list of provider IDs that filters the events the callback will receive.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a callback to receive events from specified providers when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.Use(Microsoft.Windows.EventTracing.ITraceSource,System.Collections.Generic.IReadOnlyList{System.Guid},Microsoft.Windows.EventTracing.TraceEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseMetadata">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.Metadata.ITraceMetadata UseMetadata (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.Metadata.ITraceMetadata UseMetadata(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseMetadata(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMetadata (trace As ITraceSource) As ITraceMetadata" />
        <MemberSignature Language="F#" Value="static member UseMetadata : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.Metadata.ITraceMetadata" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UseMetadata trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.Metadata.ITraceMetadata</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides trace metadata available without further processing.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseMetadata(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePending&lt;TDataSource&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;TDataSource&gt; UsePending&lt;TDataSource&gt; (this Microsoft.Windows.EventTracing.ITraceSource trace, Microsoft.Windows.EventTracing.IProvider&lt;TDataSource&gt; provider, Microsoft.Windows.EventTracing.ConsumerSchedule availability);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;!!TDataSource&gt; UsePending&lt;TDataSource&gt;(class Microsoft.Windows.EventTracing.ITraceSource trace, class Microsoft.Windows.EventTracing.IProvider`1&lt;!!TDataSource&gt; provider, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule availability) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePending``1(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.IProvider{``0},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePending(Of TDataSource) (trace As ITraceSource, provider As IProvider(Of TDataSource), availability As ConsumerSchedule) As IPendingResult(Of TDataSource)" />
        <MemberSignature Language="F#" Value="static member UsePending : Microsoft.Windows.EventTracing.ITraceSource * Microsoft.Windows.EventTracing.IProvider&lt;'DataSource&gt; * Microsoft.Windows.EventTracing.ConsumerSchedule -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;'DataSource&gt;" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePending (trace, provider, availability)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;TDataSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TDataSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="provider" Type="Microsoft.Windows.EventTracing.IProvider&lt;TDataSource&gt;" />
          <Parameter Name="availability" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
        </Parameters>
        <Docs>
          <typeparam name="TDataSource">The data source type.</typeparam>
          <param name="trace">The trace from which to access the data.</param>
          <param name="provider">The data source provider.</param>
          <param name="availability">A value indicating when to make the pending result available.</param>
          <summary>
            Registers a data source provider to make its data source available at a later point in trace processing.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePending``1(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.IProvider{``0},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePendingPerTrace&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;T&gt; UsePendingPerTrace&lt;T&gt; (this Microsoft.Windows.EventTracing.ITraceSource trace, object perTraceKey, Microsoft.Windows.EventTracing.IProvider&lt;Microsoft.Windows.EventTracing.IProvider&lt;T&gt;&gt; providerOfProvider, Microsoft.Windows.EventTracing.ConsumerSchedule availability);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;!!T&gt; UsePendingPerTrace&lt;T&gt;(class Microsoft.Windows.EventTracing.ITraceSource trace, object perTraceKey, class Microsoft.Windows.EventTracing.IProvider`1&lt;class Microsoft.Windows.EventTracing.IProvider`1&lt;!!T&gt;&gt; providerOfProvider, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule availability) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace``1(Microsoft.Windows.EventTracing.ITraceSource,System.Object,Microsoft.Windows.EventTracing.IProvider{Microsoft.Windows.EventTracing.IProvider{``0}},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePendingPerTrace(Of T) (trace As ITraceSource, perTraceKey As Object, providerOfProvider As IProvider(Of IProvider(Of T)), availability As ConsumerSchedule) As IPendingResult(Of T)" />
        <MemberSignature Language="F#" Value="static member UsePendingPerTrace : Microsoft.Windows.EventTracing.ITraceSource * obj * Microsoft.Windows.EventTracing.IProvider&lt;Microsoft.Windows.EventTracing.IProvider&lt;'T&gt;&gt; * Microsoft.Windows.EventTracing.ConsumerSchedule -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;'T&gt;" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace (trace, perTraceKey, providerOfProvider, availability)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="perTraceKey" Type="System.Object" />
          <Parameter Name="providerOfProvider" Type="Microsoft.Windows.EventTracing.IProvider&lt;Microsoft.Windows.EventTracing.IProvider&lt;T&gt;&gt;" />
          <Parameter Name="availability" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="trace">To be added.</param>
          <param name="perTraceKey">To be added.</param>
          <param name="providerOfProvider">To be added.</param>
          <param name="availability">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace``1(Microsoft.Windows.EventTracing.ITraceSource,System.Object,Microsoft.Windows.EventTracing.IProvider{Microsoft.Windows.EventTracing.IProvider{``0}},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UsePendingPerTrace&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;T&gt; UsePendingPerTrace&lt;T&gt; (this Microsoft.Windows.EventTracing.ITraceSource trace, object perTraceKey, Func&lt;Microsoft.Windows.EventTracing.IProvider&lt;T&gt;&gt; createProvider, Microsoft.Windows.EventTracing.ConsumerSchedule availability);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;!!T&gt; UsePendingPerTrace&lt;T&gt;(class Microsoft.Windows.EventTracing.ITraceSource trace, object perTraceKey, class System.Func`1&lt;class Microsoft.Windows.EventTracing.IProvider`1&lt;!!T&gt;&gt; createProvider, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule availability) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace``1(Microsoft.Windows.EventTracing.ITraceSource,System.Object,System.Func{Microsoft.Windows.EventTracing.IProvider{``0}},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UsePendingPerTrace(Of T) (trace As ITraceSource, perTraceKey As Object, createProvider As Func(Of IProvider(Of T)), availability As ConsumerSchedule) As IPendingResult(Of T)" />
        <MemberSignature Language="F#" Value="static member UsePendingPerTrace : Microsoft.Windows.EventTracing.ITraceSource * obj * Func&lt;Microsoft.Windows.EventTracing.IProvider&lt;'T&gt;&gt; * Microsoft.Windows.EventTracing.ConsumerSchedule -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;'T&gt;" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace (trace, perTraceKey, createProvider, availability)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="perTraceKey" Type="System.Object" />
          <Parameter Name="createProvider" Type="System.Func&lt;Microsoft.Windows.EventTracing.IProvider&lt;T&gt;&gt;" />
          <Parameter Name="availability" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="trace">To be added.</param>
          <param name="perTraceKey">To be added.</param>
          <param name="createProvider">To be added.</param>
          <param name="availability">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UsePendingPerTrace``1(Microsoft.Windows.EventTracing.ITraceSource,System.Object,System.Func{Microsoft.Windows.EventTracing.IProvider{``0}},Microsoft.Windows.EventTracing.ConsumerSchedule)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseStreaming">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IStreamingTraceSource UseStreaming (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IStreamingTraceSource UseStreaming(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseStreaming(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseStreaming (trace As ITraceSource) As IStreamingTraceSource" />
        <MemberSignature Language="F#" Value="static member UseStreaming : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IStreamingTraceSource" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UseStreaming trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IStreamingTraceSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to stream the data.</param>
          <summary>Provides streaming (non-buffered) data from the trace.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseStreaming(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseTraceTimestampContext">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.ITraceTimestampContext UseTraceTimestampContext (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.ITraceTimestampContext UseTraceTimestampContext(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTraceTimestampContext(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTraceTimestampContext (trace As ITraceSource) As ITraceTimestampContext" />
        <MemberSignature Language="F#" Value="static member UseTraceTimestampContext : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.ITraceTimestampContext" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTraceTimestampContext trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.ITraceTimestampContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides a context to interpret a <see cref="T:Microsoft.Windows.EventTracing.TraceTimestampValue" />.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTraceTimestampContext(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseTwoPassCompletion">
        <MemberSignature Language="C#" Value="public static void UseTwoPassCompletion (this Microsoft.Windows.EventTracing.ITraceSource trace, Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseTwoPassCompletion(class Microsoft.Windows.EventTracing.ITraceSource trace, class Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTwoPassCompletion(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseTwoPassCompletion (trace As ITraceSource, consumer As ICompletableTwoPassEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseTwoPassCompletion : Microsoft.Windows.EventTracing.ITraceSource * Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTwoPassCompletion (trace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <param name="consumer">The event consumer to register.</param>
          <summary>Registers a consumer to receive events when the trace is processed across two passes.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.TraceSourceExtensions.UseTwoPassCompletion(Microsoft.Windows.EventTracing.ITraceSource,Microsoft.Windows.EventTracing.ICompletableTwoPassEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="Create">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp Create (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, Microsoft.Windows.EventTracing.TraceTimestampValue value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp Create(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, valuetype Microsoft.Windows.EventTracing.TraceTimestampValue value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.Create(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.TraceTimestampValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Create (context As ITraceTimestampContext, value As TraceTimestampValue) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member Create : Microsoft.Windows.EventTracing.ITraceTimestampContext * Microsoft.Windows.EventTracing.TraceTimestampValue -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.Create (context, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="value" Type="Microsoft.Windows.EventTracing.TraceTimestampValue" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.Create(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.TraceTimestampValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateApproximate">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, Microsoft.Windows.EventTracing.Timestamp value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, valuetype Microsoft.Windows.EventTracing.Timestamp value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.Timestamp)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateApproximate (context As ITraceTimestampContext, value As Timestamp) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateApproximate : Microsoft.Windows.EventTracing.ITraceTimestampContext * Microsoft.Windows.EventTracing.Timestamp -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate (context, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="value" Type="Microsoft.Windows.EventTracing.Timestamp" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.Timestamp)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateApproximate">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, DateTimeOffset value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, valuetype System.DateTimeOffset value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.DateTimeOffset)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateApproximate (context As ITraceTimestampContext, value As DateTimeOffset) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateApproximate : Microsoft.Windows.EventTracing.ITraceTimestampContext * DateTimeOffset -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate (context, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="value" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateApproximate">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, long nanoseconds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateApproximate(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, int64 nanoseconds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.Int64)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateApproximate (context As ITraceTimestampContext, nanoseconds As Long) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateApproximate : Microsoft.Windows.EventTracing.ITraceTimestampContext * int64 -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate (context, nanoseconds)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="nanoseconds" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="nanoseconds">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximate(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateApproximateTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceDuration CreateApproximateTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, Microsoft.Windows.EventTracing.Duration value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceDuration CreateApproximateTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, valuetype Microsoft.Windows.EventTracing.Duration value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.Duration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateApproximateTraceDuration (context As ITraceTimestampContext, value As Duration) As TraceDuration" />
        <MemberSignature Language="F#" Value="static member CreateApproximateTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext * Microsoft.Windows.EventTracing.Duration -&gt; Microsoft.Windows.EventTracing.TraceDuration" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration (context, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceDuration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="value" Type="Microsoft.Windows.EventTracing.Duration" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.Duration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateApproximateTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceDuration CreateApproximateTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, long nanoseconds);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceDuration CreateApproximateTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, int64 nanoseconds) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.Int64)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateApproximateTraceDuration (context As ITraceTimestampContext, nanoseconds As Long) As TraceDuration" />
        <MemberSignature Language="F#" Value="static member CreateApproximateTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext * int64 -&gt; Microsoft.Windows.EventTracing.TraceDuration" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration (context, nanoseconds)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceDuration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="nanoseconds" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="nanoseconds">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateApproximateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateMaxTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceDuration CreateMaxTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceDuration CreateMaxTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMaxTraceDuration (context As ITraceTimestampContext) As TraceDuration" />
        <MemberSignature Language="F#" Value="static member CreateMaxTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceDuration" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxTraceDuration context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceDuration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateMaxValue">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateMaxValue (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateMaxValue(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxValue(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMaxValue (context As ITraceTimestampContext) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateMaxValue : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxValue context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMaxValue(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateMinTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceDuration CreateMinTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceDuration CreateMinTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMinTraceDuration (context As ITraceTimestampContext) As TraceDuration" />
        <MemberSignature Language="F#" Value="static member CreateMinTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceDuration" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinTraceDuration context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceDuration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateMinValue">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateMinValue (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateMinValue(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinValue(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMinValue (context As ITraceTimestampContext) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateMinValue : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinValue context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateMinValue(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context, Microsoft.Windows.EventTracing.TraceTimestampValue value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context, valuetype Microsoft.Windows.EventTracing.TraceTimestampValue value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.TraceTimestampValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateTraceDuration (context As ITraceTimestampContext, value As TraceTimestampValue) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext * Microsoft.Windows.EventTracing.TraceTimestampValue -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateTraceDuration (context, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
          <Parameter Name="value" Type="Microsoft.Windows.EventTracing.TraceTimestampValue" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext,Microsoft.Windows.EventTracing.TraceTimestampValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateZero">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceTimestamp CreateZero (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceTimestamp CreateZero(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZero(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateZero (context As ITraceTimestampContext) As TraceTimestamp" />
        <MemberSignature Language="F#" Value="static member CreateZero : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceTimestamp" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZero context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceTimestamp</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZero(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceTimestampContext" />
      </Targets>
      <Member MemberName="CreateZeroTraceDuration">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.TraceDuration CreateZeroTraceDuration (this Microsoft.Windows.EventTracing.ITraceTimestampContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Windows.EventTracing.TraceDuration CreateZeroTraceDuration(class Microsoft.Windows.EventTracing.ITraceTimestampContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZeroTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateZeroTraceDuration (context As ITraceTimestampContext) As TraceDuration" />
        <MemberSignature Language="F#" Value="static member CreateZeroTraceDuration : Microsoft.Windows.EventTracing.ITraceTimestampContext -&gt; Microsoft.Windows.EventTracing.TraceDuration" Usage="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZeroTraceDuration context" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.TraceDuration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Windows.EventTracing.ITraceTimestampContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.TraceTimestampContextExtensions" Member="M:Microsoft.Windows.EventTracing.TraceTimestampContextExtensions.CreateZeroTraceDuration(Microsoft.Windows.EventTracing.ITraceTimestampContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Utc.IUtcDataSource" />
      </Targets>
      <Member MemberName="GetSnapshotScenario">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity GetSnapshotScenario (this Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity GetSnapshotScenario(class Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Utc.UtcDataSourceExtensions.GetSnapshotScenario(Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSnapshotScenario (dataSource As IUtcDataSource) As IUtcScenarioActivity" />
        <MemberSignature Language="F#" Value="static member GetSnapshotScenario : Microsoft.Windows.EventTracing.Utc.IUtcDataSource -&gt; Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity" Usage="Microsoft.Windows.EventTracing.Utc.UtcDataSourceExtensions.GetSnapshotScenario dataSource" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dataSource" Type="Microsoft.Windows.EventTracing.Utc.IUtcDataSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dataSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Utc.UtcDataSourceExtensions" Member="M:Microsoft.Windows.EventTracing.Utc.UtcDataSourceExtensions.GetSnapshotScenario(Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity" />
      </Targets>
      <Member MemberName="GetEventTriggers">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcEventTrigger&gt; GetEventTriggers (this Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity scenario, Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Windows.EventTracing.Utc.IUtcEventTrigger&gt; GetEventTriggers(class Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity scenario, class Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetEventTriggers(Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity,Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEventTriggers (scenario As IUtcScenarioActivity, dataSource As IUtcDataSource) As IReadOnlyList(Of IUtcEventTrigger)" />
        <MemberSignature Language="F#" Value="static member GetEventTriggers : Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity * Microsoft.Windows.EventTracing.Utc.IUtcDataSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcEventTrigger&gt;" Usage="Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetEventTriggers (scenario, dataSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcEventTrigger&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scenario" Type="Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity" RefType="this" />
          <Parameter Name="dataSource" Type="Microsoft.Windows.EventTracing.Utc.IUtcDataSource" />
        </Parameters>
        <Docs>
          <param name="scenario">To be added.</param>
          <param name="dataSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions" Member="M:Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetEventTriggers(Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity,Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity" />
      </Targets>
      <Member MemberName="GetTimeTriggers">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcTimeTrigger&gt; GetTimeTriggers (this Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity scenario, Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Windows.EventTracing.Utc.IUtcTimeTrigger&gt; GetTimeTriggers(class Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity scenario, class Microsoft.Windows.EventTracing.Utc.IUtcDataSource dataSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetTimeTriggers(Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity,Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTimeTriggers (scenario As IUtcScenarioActivity, dataSource As IUtcDataSource) As IReadOnlyList(Of IUtcTimeTrigger)" />
        <MemberSignature Language="F#" Value="static member GetTimeTriggers : Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity * Microsoft.Windows.EventTracing.Utc.IUtcDataSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcTimeTrigger&gt;" Usage="Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetTimeTriggers (scenario, dataSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Windows.EventTracing.Utc.IUtcTimeTrigger&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scenario" Type="Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity" RefType="this" />
          <Parameter Name="dataSource" Type="Microsoft.Windows.EventTracing.Utc.IUtcDataSource" />
        </Parameters>
        <Docs>
          <param name="scenario">To be added.</param>
          <param name="dataSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions" Member="M:Microsoft.Windows.EventTracing.Utc.UtcScenarioActivityExtensions.GetTimeTriggers(Microsoft.Windows.EventTracing.Utc.IUtcScenarioActivity,Microsoft.Windows.EventTracing.Utc.IUtcDataSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseUtcData">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Utc.IUtcDataSource&gt; UseUtcData (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.Utc.IUtcDataSource&gt; UseUtcData(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.UtcTraceSourceExtensions.UseUtcData(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseUtcData (trace As ITraceSource) As IPendingResult(Of IUtcDataSource)" />
        <MemberSignature Language="F#" Value="static member UseUtcData : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Utc.IUtcDataSource&gt;" Usage="Microsoft.Windows.EventTracing.UtcTraceSourceExtensions.UseUtcData trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.Utc.IUtcDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>
            Provides data from a trace about Microsoft telemetry activity using Universal Telemetry Client (UTC).
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.UtcTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.UtcTraceSourceExtensions.UseUtcData(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseFocusChangeEvents">
        <MemberSignature Language="C#" Value="public static void UseFocusChangeEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseFocusChangeEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseFocusChangeEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As FocusChangeEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseFocusChangeEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed FocusChange events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseFocusChangeEvents">
        <MemberSignature Language="C#" Value="public static void UseFocusChangeEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseFocusChangeEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseFocusChangeEvents (streamingTrace As IStreamingTraceSource, process As FocusChangeEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseFocusChangeEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed FocusChange events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.FocusChangeEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseFocusChangeEvents">
        <MemberSignature Language="C#" Value="public static void UseFocusChangeEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseFocusChangeEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseFocusChangeEvents (streamingTrace As IStreamingTraceSource, consumer As IFocusChangeEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseFocusChangeEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed FocusChange events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseFocusChangeEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.IFocusChangeEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSessionLayerSetActiveWindowEvents">
        <MemberSignature Language="C#" Value="public static void UseSessionLayerSetActiveWindowEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSessionLayerSetActiveWindowEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSessionLayerSetActiveWindowEvents (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As SessionLayerSetActiveWindowEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSessionLayerSetActiveWindowEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed SessionLayerSetActiveWindow events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSessionLayerSetActiveWindowEvents">
        <MemberSignature Language="C#" Value="public static void UseSessionLayerSetActiveWindowEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSessionLayerSetActiveWindowEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSessionLayerSetActiveWindowEvents (streamingTrace As IStreamingTraceSource, consumer As ISessionLayerSetActiveWindowEventConsumer)" />
        <MemberSignature Language="F#" Value="static member UseSessionLayerSetActiveWindowEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive parsed SessionLayerSetActiveWindow events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.ISessionLayerSetActiveWindowEventConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseSessionLayerSetActiveWindowEvents">
        <MemberSignature Language="C#" Value="public static void UseSessionLayerSetActiveWindowEvents (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSessionLayerSetActiveWindowEvents(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSessionLayerSetActiveWindowEvents (streamingTrace As IStreamingTraceSource, process As SessionLayerSetActiveWindowEventCallback)" />
        <MemberSignature Language="F#" Value="static member UseSessionLayerSetActiveWindowEvents : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive parsed SessionLayerSetActiveWindow events when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseSessionLayerSetActiveWindowEvents(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.SessionLayerSetActiveWindowEventCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseWindowInFocus">
        <MemberSignature Language="C#" Value="public static void UseWindowInFocus (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.ConsumerSchedule schedule, Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseWindowInFocus(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, valuetype Microsoft.Windows.EventTracing.ConsumerSchedule schedule, class Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseWindowInFocus (streamingTrace As IStreamingTraceSource, schedule As ConsumerSchedule, process As WindowInFocusIntervalCallback)" />
        <MemberSignature Language="F#" Value="static member UseWindowInFocus : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.ConsumerSchedule * Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus (streamingTrace, schedule, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="schedule" Type="Microsoft.Windows.EventTracing.ConsumerSchedule" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="schedule">The schedule indicating when to parse the events.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive window-in-focus data when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.ConsumerSchedule,Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseWindowInFocus">
        <MemberSignature Language="C#" Value="public static void UseWindowInFocus (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer consumer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseWindowInFocus(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer consumer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseWindowInFocus (streamingTrace As IStreamingTraceSource, consumer As IWindowInFocusIntervalConsumer)" />
        <MemberSignature Language="F#" Value="static member UseWindowInFocus : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus (streamingTrace, consumer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="consumer" Type="Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="consumer">The callback to call with the event parsing result.</param>
          <summary>
            Registers a consumer to receive window-in-focus data when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusIntervalConsumer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.IStreamingTraceSource" />
      </Targets>
      <Member MemberName="UseWindowInFocus">
        <MemberSignature Language="C#" Value="public static void UseWindowInFocus (this Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback process);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseWindowInFocus(class Microsoft.Windows.EventTracing.IStreamingTraceSource streamingTrace, class Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback process) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseWindowInFocus (streamingTrace As IStreamingTraceSource, process As WindowInFocusIntervalCallback)" />
        <MemberSignature Language="F#" Value="static member UseWindowInFocus : Microsoft.Windows.EventTracing.IStreamingTraceSource * Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback -&gt; unit" Usage="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus (streamingTrace, process)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="streamingTrace" Type="Microsoft.Windows.EventTracing.IStreamingTraceSource" RefType="this" />
          <Parameter Name="process" Type="Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback" />
        </Parameters>
        <Docs>
          <param name="streamingTrace">The trace from which to access the data.</param>
          <param name="process">The callback to register.</param>
          <summary>
            Registers a consumer to receive window-in-focus data when the trace is processed.
            </summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusStreamingTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.IStreamingTraceSource,Microsoft.Windows.EventTracing.WindowInFocus.WindowInFocusIntervalCallback)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Windows.EventTracing.ITraceSource" />
      </Targets>
      <Member MemberName="UseWindowInFocus">
        <MemberSignature Language="C#" Value="public static Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusDataSource&gt; UseWindowInFocus (this Microsoft.Windows.EventTracing.ITraceSource trace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Windows.EventTracing.IPendingResult`1&lt;class Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusDataSource&gt; UseWindowInFocus(class Microsoft.Windows.EventTracing.ITraceSource trace) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Windows.EventTracing.WindowInFocusTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.ITraceSource)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWindowInFocus (trace As ITraceSource) As IPendingResult(Of IWindowInFocusDataSource)" />
        <MemberSignature Language="F#" Value="static member UseWindowInFocus : Microsoft.Windows.EventTracing.ITraceSource -&gt; Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusDataSource&gt;" Usage="Microsoft.Windows.EventTracing.WindowInFocusTraceSourceExtensions.UseWindowInFocus trace" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Windows.EventTracing.IPendingResult&lt;Microsoft.Windows.EventTracing.WindowInFocus.IWindowInFocusDataSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="trace" Type="Microsoft.Windows.EventTracing.ITraceSource" RefType="this" />
        </Parameters>
        <Docs>
          <param name="trace">The trace from which to access the data.</param>
          <summary>Provides data from a trace about changes to the active UI window in focus.</summary>
        </Docs>
        <Link Type="Microsoft.Windows.EventTracing.WindowInFocusTraceSourceExtensions" Member="M:Microsoft.Windows.EventTracing.WindowInFocusTraceSourceExtensions.UseWindowInFocus(Microsoft.Windows.EventTracing.ITraceSource)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
